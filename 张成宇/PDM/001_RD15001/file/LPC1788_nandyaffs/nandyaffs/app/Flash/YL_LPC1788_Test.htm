<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\YL_LPC1788_Test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\YL_LPC1788_Test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Thu Jun 02 10:57:22 2016
<BR><P>
<H3>Maximum Stack Usage =       2368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; fstest &rArr; yaffs_mount &rArr; yaffs_GutsInitialise &rArr; yaffs_Scan &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[a9]">yaffs_VerifyObject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[aa]">yaffs_VerifyDirectory</a><BR>
 <LI><a href="#[e3]">yaffs_UpdateObjectHeader</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e2]">yaffs_CheckGarbageCollection</a><BR>
 <LI><a href="#[165]">yaffsfs_DoFindDirectory</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[166]">yaffsfs_FollowLink</a><BR>
 <LI><a href="#[cf]">yaffs_SoftDeleteWorker</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf]">yaffs_SoftDeleteWorker</a><BR>
 <LI><a href="#[f1]">yaffs_PruneWorker</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f1]">yaffs_PruneWorker</a><BR>
 <LI><a href="#[135]">yaffs_qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[135]">yaffs_qsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">EEPROM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[30]">GPIO_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">LCD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">MCI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[31]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2d]">UART4_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[48]">UARTGetChar</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[46]">UARTGetKey</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[4a]">UARTGetValue</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[44]">UARTPutChar</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[4c]">UARTPutDec</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[4d]">UARTPutDec16</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[4e]">UARTPutDec32</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[50]">UARTPutHex</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[52]">UARTPutHex16</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[51]">UARTPutHex16_</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[54]">UARTPutHex32</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[53]">UARTPutHex32_</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[4f]">UARTPutHex_</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[49]">UARTPuts</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[4b]">UARTPuts_</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[33]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3d]">yaffsfs_RemoveObjectCallback</a> from yaffsfs.o(.text) referenced from yaffsfs.o(.text)
 <LI><a href="#[36]">ybicmp</a> from yaffs_guts.o(.text) referenced from yaffs_guts.o(.text)
 <LI><a href="#[39]">yflash2_EraseBlockInNAND</a> from flash2k.o(.text) referenced from yaffscfg2k.o(.text)
 <LI><a href="#[3a]">yflash2_InitialiseNAND</a> from flash2k.o(.text) referenced from yaffscfg2k.o(.text)
 <LI><a href="#[3b]">yflash2_MarkNANDBlockBad</a> from flash2k.o(.text) referenced from yaffscfg2k.o(.text)
 <LI><a href="#[3c]">yflash2_QueryNANDBlock</a> from flash2k.o(.text) referenced from yaffscfg2k.o(.text)
 <LI><a href="#[38]">yflash2_ReadChunkWithTagsFromNAND</a> from flash2k.o(.text) referenced from yaffscfg2k.o(.text)
 <LI><a href="#[37]">yflash2_WriteChunkWithTagsToNAND</a> from flash2k.o(.text) referenced from yaffscfg2k.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[177]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[179]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[17d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, system_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>CLKPWR_GetCLK</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
</UL>

<P><STRONG><a name="[5f]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[40]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[16d]"></a>yaffs_GetObjectLinkCount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>

<P><STRONG><a name="[42]"></a>yaffs_InitialiseTags</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, yaffs_tagsvalidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_InitialiseTags
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2TagsPart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>

<P><STRONG><a name="[142]"></a>yaffs_ValidateTags</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, yaffs_tagsvalidity.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[d7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CloneString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectFileLength
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[17e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[44]"></a>UARTPutChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32_
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16_
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex_
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec32
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec16
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>UARTGetKey</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTGetKey &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>UARTGetChar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTGetChar &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>UARTPuts</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts_
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>UARTGetValue</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UARTGetValue &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>UARTPuts_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UARTPuts_ &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>UARTPutDec</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutDec &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>UARTPutDec16</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UARTPutDec16 &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>UARTPutDec32</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UARTPutDec32 &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>UARTPutHex_</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutHex_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>UARTPutHex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>UARTPutHex16_</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutHex16_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>UARTPutHex16</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex16 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>UARTPutHex32_</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutHex32_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>UARTPutHex32</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex32 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>debug_frmwrk_init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = debug_frmwrk_init &rArr; UART_Init &rArr; uart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>EMC_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EMC_Init &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
</UL>

<P><STRONG><a name="[6a]"></a>EMC_StaMemConfigMW</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMC_StaMemConfigMW
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
</UL>

<P><STRONG><a name="[6b]"></a>EMC_StaMemConfigPB</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMC_StaMemConfigPB
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
</UL>

<P><STRONG><a name="[6c]"></a>EMC_SetStaMemoryParameter</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
</UL>

<P><STRONG><a name="[7b]"></a>SDRAMInit</STRONG> (Thumb, 510 bytes, Stack size 12 bytes, sdram_k4s561632j.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>TIM_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converPtrToTimeNum
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
</UL>

<P><STRONG><a name="[63]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[64]"></a>TIM_ResetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[62]"></a>TIM_ConfigMatch</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[61]"></a>TIM_Waitus</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
</UL>

<P><STRONG><a name="[65]"></a>TIM_Waitms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_Waitms &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Reset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
</UL>

<P><STRONG><a name="[57]"></a>UART_Init</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_Init &rArr; uart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[58]"></a>UART_TxCmd</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[56]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[67]"></a>UART_SendByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[68]"></a>UART_ReceiveByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[45]"></a>UART_Send</STRONG> (Thumb, 152 bytes, Stack size 36 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>

<P><STRONG><a name="[47]"></a>UART_Receive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetChar
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetKey
</UL>

<P><STRONG><a name="[69]"></a>NandFlash_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, nandflash_k9f2g08u0x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NandFlash_Init &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_SetStaMemoryParameter
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigPB
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigMW
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>NandFlash_Reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nandflash_k9f2g08u0x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NandFlash_Reset &rArr; TIM_Waitms &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>Nand_EraseBlockLarge</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nandflash_k9f2g08u0x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Nand_EraseBlockLarge
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_EraseBlockInNAND
</UL>

<P><STRONG><a name="[70]"></a>Nand_WritePageWithSpare2048</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, nandflash_k9f2g08u0x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Nand_WritePageWithSpare2048
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_WriteChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[71]"></a>Nand_ReadPageWithSpare2048</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, nandflash_k9f2g08u0x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Nand_ReadPageWithSpare2048
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_ReadChunkWithTagsFromNAND
</UL>

<P><STRONG><a name="[7c]"></a>print_boot_msg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = print_boot_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>init_systick</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadPageWithSpare2048
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePageWithSpare2048
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_EraseBlockLarge
</UL>

<P><STRONG><a name="[73]"></a>fstest</STRONG> (Thumb, 248 bytes, Stack size 512 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = fstest &rArr; yaffs_mount &rArr; yaffs_GutsInitialise &rArr; yaffs_Scan &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_StartUp
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = main &rArr; fstest &rArr; yaffs_mount &rArr; yaffs_GutsInitialise &rArr; yaffs_Scan &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_boot_msg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Reset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[39]"></a>yflash2_EraseBlockInNAND</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, flash2k.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yflash2_EraseBlockInNAND &rArr; Nand_EraseBlockLarge
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_EraseBlockLarge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffscfg2k.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>yflash2_WriteChunkWithTagsToNAND</STRONG> (Thumb, 62 bytes, Stack size 96 bytes, flash2k.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = yflash2_WriteChunkWithTagsToNAND &rArr; yaffs_PackTags2 &rArr; yaffs_ECCCalculateOther
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PackTags2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePageWithSpare2048
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkWithTagsToNAND
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffscfg2k.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>yflash2_ReadChunkWithTagsFromNAND</STRONG> (Thumb, 62 bytes, Stack size 96 bytes, flash2k.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = yflash2_ReadChunkWithTagsFromNAND &rArr; yaffs_UnpackTags2 &rArr; yaffs_ECCCorrectOther
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadPageWithSpare2048
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_QueryNANDBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffscfg2k.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>yflash2_GetNumberOfBlocks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash2k.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_StartUp
</UL>

<P><STRONG><a name="[3a]"></a>yflash2_InitialiseNAND</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash2k.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> yaffscfg2k.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>yflash2_MarkNANDBlockBad</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash2k.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> yaffscfg2k.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>yflash2_QueryNANDBlock</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, flash2k.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = yflash2_QueryNANDBlock &rArr; yflash2_ReadChunkWithTagsFromNAND &rArr; yaffs_UnpackTags2 &rArr; yaffs_ECCCorrectOther
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_ReadChunkWithTagsFromNAND
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffscfg2k.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>yaffs_CheckpointOpen</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = yaffs_CheckpointOpen &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointErase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointSpaceOk
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointData
</UL>

<P><STRONG><a name="[125]"></a>yaffs_GetCheckpointSum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_GetCheckpointSum
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointSum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointSum
</UL>

<P><STRONG><a name="[87]"></a>yaffs_CheckpointRead</STRONG> (Thumb, 268 bytes, Stack size 112 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = yaffs_CheckpointRead &rArr; yaffs_CheckpointFindNextCheckpointBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointFindNextCheckpointBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointSum
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointObjects
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointTnodes
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointDevice
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointValidityMarker
</UL>

<P><STRONG><a name="[89]"></a>yaffs_CheckpointClose</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = yaffs_CheckpointClose &rArr; yaffs_CheckpointFlushBuffer &rArr; yaffs_CheckpointFindNextErasedBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointFlushBuffer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointData
</UL>

<P><STRONG><a name="[8b]"></a>yaffs_CheckpointInvalidateStream</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_CheckpointInvalidateStream &rArr; yaffs_CheckpointErase
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointErase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointSpaceOk
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InvalidateCheckpoint
</UL>

<P><STRONG><a name="[8c]"></a>yaffs_CheckpointWrite</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointFlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointSum
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointObjects
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointTnodes
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointTnodeWorker
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointDevice
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointValidityMarker
</UL>

<P><STRONG><a name="[14f]"></a>yaffs_ECCCalculate</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, yaffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_ECCCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CalcECC
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkFromNAND
</UL>

<P><STRONG><a name="[8d]"></a>yaffs_ECCCorrect</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, yaffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountBits
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkFromNAND
</UL>

<P><STRONG><a name="[14a]"></a>yaffs_ECCCalculateOther</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, yaffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_ECCCalculateOther
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PackTags2
</UL>

<P><STRONG><a name="[8f]"></a>yaffs_ECCCorrectOther</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, yaffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_ECCCorrectOther
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountBits32
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2
</UL>

<P><STRONG><a name="[92]"></a>yaffs_GetTempBuffer</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = yaffs_GetTempBuffer &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkErased
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[93]"></a>yaffs_ReleaseTempBuffer</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_ReleaseTempBuffer &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkErased
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[ae]"></a>yaffs_CheckFF</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkErased
</UL>

<P><STRONG><a name="[b6]"></a>yaffs_DeleteChunk</STRONG> (Thumb, 316 bytes, Stack size 112 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = yaffs_DeleteChunk &rArr; yaffs_BlockBecameDirty &rArr; yaffs_CheckChunkErased &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleUpdateChunk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkBit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyChunkBitId
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkWithTagsToNAND
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTags
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneResizedChunks
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteWorker
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleWriteChunkError
</UL>

<P><STRONG><a name="[ba]"></a>yaffs_HandleChunkError</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleWriteChunkError
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
</UL>

<P><STRONG><a name="[cd]"></a>yaffs_PutLevel0Tnode</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = yaffs_PutLevel0Tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindAndDeleteChunkInFile
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteWorker
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteWorker
</UL>

<P><STRONG><a name="[da]"></a>yaffs_FindObjectByNumber</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_FindObjectByNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HashFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleShadowedObject
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HardlinkFixup
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindOrCreateObjectByNumber
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
</UL>

<P><STRONG><a name="[e9]"></a>yaffs_GetObjectName</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = yaffs_GetObjectName &rArr; yaffs_CheckObjectDetailsLoaded &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>

<P><STRONG><a name="[eb]"></a>yaffs_FindObjectByName</STRONG> (Thumb, 168 bytes, Stack size 280 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = yaffs_FindObjectByName &rArr; yaffs_GetObjectName &rArr; yaffs_CheckObjectDetailsLoaded &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CalcNameSum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ChangeObjectName
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
</UL>

<P><STRONG><a name="[105]"></a>yaffs_ResizeFile</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFilesChunkCache
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneResizedChunks
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkDataFromObject
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneFileStructure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InvalidateWholeChunkCache
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckGarbageCollection
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddrToChunk
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkFile
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteFile
</UL>

<P><STRONG><a name="[108]"></a>yaffs_DeleteFile</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkFile
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteFile
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeTnode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DestroyObject
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
</UL>

<P><STRONG><a name="[10b]"></a>yaffs_MknodFile</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = yaffs_MknodFile &rArr; yaffs_MknodObject &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
</UL>

<P><STRONG><a name="[10c]"></a>yaffs_MknodDirectory</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = yaffs_MknodDirectory &rArr; yaffs_MknodObject &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
</UL>

<P><STRONG><a name="[10d]"></a>yaffs_GetEquivalentObject</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = yaffs_GetEquivalentObject &rArr; yaffs_CheckObjectDetailsLoaded &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoChMod
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectFileLength
</UL>

<P><STRONG><a name="[12b]"></a>yaffs_CheckpointRestore</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = yaffs_CheckpointRestore &rArr; yaffs_ReadCheckpointData &rArr; yaffs_ReadCheckpointObjects &rArr; yaffs_CheckpointObjectToObject &rArr; yaffs_FindOrCreateObjectByNumber &rArr; yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFreeChunks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjects
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[12c]"></a>yaffs_ReadDataFromFile</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = yaffs_ReadDataFromFile &rArr; yaffs_GrabChunkCache &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UseChunkCache
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkCache
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GrabChunkCache
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkDataFromObject
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddrToChunk
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
</UL>

<P><STRONG><a name="[12e]"></a>yaffs_WriteDataToFile</STRONG> (Thumb, 484 bytes, Stack size 88 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = yaffs_WriteDataToFile &rArr; yaffs_GrabChunkCache &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InvalidateChunkCache
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UseChunkCache
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkCache
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GrabChunkCache
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkDataFromObject
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckSpaceForAllocation
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddrToChunk
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
</UL>

<P><STRONG><a name="[12f]"></a>yaffs_FlushFile</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = yaffs_FlushFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFilesChunkCache
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoChMod
</UL>

<P><STRONG><a name="[136]"></a>yaffs_GetObjectFileLength</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = yaffs_GetObjectFileLength &rArr; yaffs_GetEquivalentObject &rArr; yaffs_CheckObjectDetailsLoaded &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetEquivalentObject
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>

<P><STRONG><a name="[138]"></a>yaffs_Deinitialise</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_Deinitialise &rArr; yaffs_DeinitialiseObjects &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseBlocks
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseObjects
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseTnodes
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[139]"></a>yaffs_GutsInitialise</STRONG> (Thumb, 954 bytes, Stack size 32 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = yaffs_GutsInitialise &rArr; yaffs_Scan &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckStructures
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateInitialDirectories
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckDevFunctions
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_StripDeletedObjects
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFreeChunks
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseBlocks
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseBlocks
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseObjects
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseObjects
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTnodes
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseTnodes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlocks
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTempBuffers
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shifts
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftsGE
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseNAND
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Deinitialise
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
</UL>

<P><STRONG><a name="[a1]"></a>yaffs_ReadChunkWithTagsFromNAND</STRONG> (Thumb, 128 bytes, Stack size 104 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityReadChunkWithTagsFromNAND
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleChunkError
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkDataFromObject
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInGroup
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkErased
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFile
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyTnodeWorker
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[b7]"></a>yaffs_WriteChunkWithTagsToNAND</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = yaffs_WriteChunkWithTagsToNAND &rArr; yflash2_WriteChunkWithTagsToNAND &rArr; yaffs_PackTags2 &rArr; yaffs_ECCCalculateOther
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_WriteChunkWithTagsToNAND
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ValidateTags
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityWriteChunkWithTagsToNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>

<P><STRONG><a name="[b1]"></a>yaffs_MarkBlockBad</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = yaffs_MarkBlockBad &rArr; yaffs_TagsCompatabilityMarkNANDBlockBad &rArr; yaffs_WriteChunkToNAND
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityMarkNANDBlockBad
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
</UL>

<P><STRONG><a name="[133]"></a>yaffs_QueryInitialBlockState</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = yaffs_QueryInitialBlockState &rArr; yaffs_TagsCompatabilityQueryNANDBlock &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityQueryNANDBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
</UL>

<P><STRONG><a name="[b2]"></a>yaffs_EraseBlockInNAND</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_EraseBlockInNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
</UL>

<P><STRONG><a name="[13a]"></a>yaffs_InitialiseNAND</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_InitialiseNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[148]"></a>yaffs_PackTags2TagsPart</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_PackTags2TagsPart
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DumpTags2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DumpPackedTags2TagsPart
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PackTags2
</UL>

<P><STRONG><a name="[7d]"></a>yaffs_PackTags2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_PackTags2 &rArr; yaffs_ECCCalculateOther
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCalculateOther
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PackTags2TagsPart
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_WriteChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[14b]"></a>yaffs_UnpackTags2TagsPart</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_UnpackTags2TagsPart &rArr; yaffs_InitialiseTags
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DumpTags2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DumpPackedTags2TagsPart
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTags
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2
</UL>

<P><STRONG><a name="[7e]"></a>yaffs_UnpackTags2</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = yaffs_UnpackTags2 &rArr; yaffs_ECCCorrectOther
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCorrectOther
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCalculateOther
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2TagsPart
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DumpTags2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DumpPackedTags2
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_ReadChunkWithTagsFromNAND
</UL>

<P><STRONG><a name="[135]"></a>yaffs_qsort</STRONG> (Thumb, 724 bytes, Stack size 80 bytes, yaffs_qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = yaffs_qsort &rArr;  yaffs_qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;med3
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapfunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
</UL>

<P><STRONG><a name="[158]"></a>yaffs_CountBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityReadChunkWithTagsFromNAND
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityQueryNANDBlock
</UL>

<P><STRONG><a name="[14e]"></a>yaffs_CalcECC</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_CalcECC &rArr; yaffs_ECCCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityWriteChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[151]"></a>yaffs_CalcTagsECC</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = yaffs_CalcTagsECC
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckECCOnTags
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_LoadTagsIntoSpare
</UL>

<P><STRONG><a name="[150]"></a>yaffs_CheckECCOnTags</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = yaffs_CheckECCOnTags &rArr; yaffs_CalcTagsECC
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CalcTagsECC
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTagsFromSpare
</UL>

<P><STRONG><a name="[143]"></a>yaffs_TagsCompatabilityWriteChunkWithTagsToNAND</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = yaffs_TagsCompatabilityWriteChunkWithTagsToNAND &rArr; yaffs_CalcECC &rArr; yaffs_ECCCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CalcECC
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkToNAND
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SpareInitialise
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_LoadTagsIntoSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[141]"></a>yaffs_TagsCompatabilityReadChunkWithTagsFromNAND</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountBits
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkFromNAND
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTagsFromSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
</UL>

<P><STRONG><a name="[144]"></a>yaffs_TagsCompatabilityMarkNANDBlockBad</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_TagsCompatabilityMarkNANDBlockBad &rArr; yaffs_WriteChunkToNAND
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkToNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MarkBlockBad
</UL>

<P><STRONG><a name="[145]"></a>yaffs_TagsCompatabilityQueryNANDBlock</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = yaffs_TagsCompatabilityQueryNANDBlock &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountBits
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkFromNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_QueryInitialBlockState
</UL>

<P><STRONG><a name="[16a]"></a>yaffsfs_SetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, yaffscfg2k.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[169]"></a>yaffsfs_Lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, yaffscfg2k.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[16b]"></a>yaffsfs_Unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, yaffscfg2k.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[f9]"></a>yaffsfs_CurrentTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, yaffscfg2k.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFile
</UL>

<P><STRONG><a name="[84]"></a>yaffs_malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, yaffscfg2k.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseBlocks
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateFreeObjects
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CloneString
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateTnodes
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTempBuffers
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointOpen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>

<P><STRONG><a name="[74]"></a>yaffs_StartUp</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, yaffscfg2k.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_StartUp &rArr; yaffs_initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_GetNumberOfBlocks
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstest
</UL>

<P><STRONG><a name="[15e]"></a>yaffsfs_GetHandlePointer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandleObject
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandle
</UL>

<P><STRONG><a name="[15d]"></a>yaffsfs_GetHandleObject</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_GetHandleObject
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandlePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
</UL>

<P><STRONG><a name="[163]"></a>yaffsfs_Match</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>

<P><STRONG><a name="[162]"></a>yaffsfs_IsPathDivider</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>

<P><STRONG><a name="[77]"></a>yaffs_open</STRONG> (Thumb, 500 bytes, Stack size 72 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = yaffs_open &rArr; yaffs_MknodFile &rArr; yaffs_MknodObject &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandlePointer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodFile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstest
</UL>

<P><STRONG><a name="[7a]"></a>yaffs_close</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = yaffs_close &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandlePointer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFile
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstest
</UL>

<P><STRONG><a name="[79]"></a>yaffs_pread</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = yaffs_pread &rArr; yaffs_ReadDataFromFile &rArr; yaffs_GrabChunkCache &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandleObject
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandlePointer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectFileLength
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstest
</UL>

<P><STRONG><a name="[78]"></a>yaffs_write</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = yaffs_write &rArr; yaffs_WriteDataToFile &rArr; yaffs_GrabChunkCache &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandleObject
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandlePointer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectFileLength
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstest
</UL>

<P><STRONG><a name="[76]"></a>yaffs_mkdir</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = yaffs_mkdir &rArr; yaffs_MknodDirectory &rArr; yaffs_MknodObject &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodDirectory
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstest
</UL>

<P><STRONG><a name="[75]"></a>yaffs_mount</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = yaffs_mount &rArr; yaffs_GutsInitialise &rArr; yaffs_Scan &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstest
</UL>

<P><STRONG><a name="[15c]"></a>yaffs_initialise</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_InitHandles
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_StartUp
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkFromNAND
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddOrFindLevel0Tnode
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointObjects
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SpareInitialise
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityReadChunkWithTagsFromNAND
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityQueryNANDBlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityMarkNANDBlockBad
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ClearChunkBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseBlocks
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkDataFromObject
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointOpen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointFlushBuffer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseBlocks
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateEmptyObject
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTnode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlocks
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTempBuffers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_ReadChunkWithTagsFromNAND
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yflash2_WriteChunkWithTagsToNAND
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_StartUp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkFromNAND
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2TagsPart
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTags
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ea]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[e5]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[ec]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>

<P><STRONG><a name="[159]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityReadChunkWithTagsFromNAND
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityQueryNANDBlock
</UL>

<P><STRONG><a name="[d8]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CloneString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[ed]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[183]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[184]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[185]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[187]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8a]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseBlocks
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteSymLink
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseObjects
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateFreeObjects
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeinitialiseTnodes
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointClose
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Deinitialise
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
</UL>

<P><STRONG><a name="[15a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5a]"></a>getPClock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getPClock
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[5c]"></a>converUSecToVal</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[60]"></a>converPtrToTimeNum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[66]"></a>uart_set_divisors</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[41]"></a>PIN_GetPointer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lpc177x_8x_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[80]"></a>yaffs_GetBlockInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointClose
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointFlushBuffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointFindNextErasedBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointErase
</UL>

<P><STRONG><a name="[83]"></a>yaffs_CheckpointSpaceOk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointInvalidateStream
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointOpen
</UL>

<P><STRONG><a name="[7f]"></a>yaffs_CheckpointErase</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_CheckpointErase
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointInvalidateStream
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointOpen
</UL>

<P><STRONG><a name="[81]"></a>yaffs_CheckpointFindNextErasedBlock</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_CheckpointFindNextErasedBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointFlushBuffer
</UL>

<P><STRONG><a name="[88]"></a>yaffs_CheckpointFindNextCheckpointBlock</STRONG> (Thumb, 126 bytes, Stack size 96 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = yaffs_CheckpointFindNextCheckpointBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRead
</UL>

<P><STRONG><a name="[86]"></a>yaffs_CheckpointFlushBuffer</STRONG> (Thumb, 198 bytes, Stack size 96 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = yaffs_CheckpointFlushBuffer &rArr; yaffs_CheckpointFindNextErasedBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointFindNextErasedBlock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointClose
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointWrite
</UL>

<P><STRONG><a name="[8e]"></a>yaffs_CountBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, yaffs_ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCorrectOther
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCorrect
</UL>

<P><STRONG><a name="[90]"></a>yaffs_CountBits32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, yaffs_ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCorrectOther
</UL>

<P><STRONG><a name="[e8]"></a>ylist_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HardlinkFixup
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HashObject
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateEmptyObject
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
</UL>

<P><STRONG><a name="[d2]"></a>ylist_del_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteHardLink
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RemoveObjectFromDirectory
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnhashObject
</UL>

<P><STRONG><a name="[9d]"></a>yaffs_GetBlockInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountFreeChunks
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindBlockForGarbageCollection
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockNotDisqualifiedFromGC
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteChunk
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateChunk
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindBlockForAllocation
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleWriteChunkError
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlocks
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>

<P><STRONG><a name="[106]"></a>yaffs_AddrToChunk</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = yaffs_AddrToChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[13e]"></a>ShiftsGE</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[13d]"></a>Shifts</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[91]"></a>yaffs_InitialiseTempBuffers</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = yaffs_InitialiseTempBuffers &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[95]"></a>yaffs_BlockBits</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_BlockBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ClearChunkBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountChunkBits
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetChunkBit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>

<P><STRONG><a name="[96]"></a>yaffs_VerifyChunkBitId</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetChunkBit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>

<P><STRONG><a name="[94]"></a>yaffs_SetChunkBit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_SetChunkBit &rArr; yaffs_BlockBits
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyChunkBitId
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBits
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateChunk
</UL>

<P><STRONG><a name="[97]"></a>yaffs_CheckChunkBit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_CheckChunkBit &rArr; yaffs_BlockBits
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyChunkBitId
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBits
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInGroup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>

<P><STRONG><a name="[98]"></a>yaffs_CountChunkBits</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_CountChunkBits &rArr; yaffs_BlockBits
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlock
</UL>

<P><STRONG><a name="[9a]"></a>yaffs_SkipVerification</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFreeChunks
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjects
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectInDirectory
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifySpecial
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifySymlink
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyHardLink
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFile
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectHeader
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlocks
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlock
</UL>

<P><STRONG><a name="[ab]"></a>yaffs_SkipFullVerification</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyDirectory
</UL>

<P><STRONG><a name="[a3]"></a>yaffs_SkipNANDVerification</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFile
</UL>

<P><STRONG><a name="[99]"></a>yaffs_VerifyBlock</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_VerifyBlock &rArr; yaffs_CountChunkBits &rArr; yaffs_BlockBits
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountChunkBits
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlocks
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyCollectedBlock
</UL>

<P><STRONG><a name="[9b]"></a>yaffs_VerifyCollectedBlock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = yaffs_VerifyCollectedBlock &rArr; yaffs_VerifyBlock &rArr; yaffs_CountChunkBits &rArr; yaffs_BlockBits
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
</UL>

<P><STRONG><a name="[9c]"></a>yaffs_VerifyBlocks</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = yaffs_VerifyBlocks &rArr; yaffs_VerifyBlock &rArr; yaffs_CountChunkBits &rArr; yaffs_BlockBits
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRestore
</UL>

<P><STRONG><a name="[9e]"></a>yaffs_VerifyObjectHeader</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_VerifyObjectHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
</UL>

<P><STRONG><a name="[a0]"></a>yaffs_GetChunkGroupBase</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_GetChunkGroupBase
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindAndDeleteChunkInFile
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInFile
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteWorker
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteWorker
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFile
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyTnodeWorker
</UL>

<P><STRONG><a name="[9f]"></a>yaffs_VerifyTnodeWorker</STRONG> (Thumb, 148 bytes, Stack size 112 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyTnodeWorker
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetChunkGroupBase
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyTnodeWorker
</UL>

<P><STRONG><a name="[a4]"></a>yaffs_FindLevel0Tnode</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = yaffs_FindLevel0Tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindAndDeleteChunkInFile
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInFile
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFile
</UL>

<P><STRONG><a name="[a2]"></a>yaffs_VerifyFile</STRONG> (Thumb, 182 bytes, Stack size 120 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = yaffs_VerifyFile &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindLevel0Tnode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetChunkGroupBase
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipNANDVerification
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
</UL>

<P><STRONG><a name="[a5]"></a>yaffs_VerifyHardLink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_VerifyHardLink
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
</UL>

<P><STRONG><a name="[a6]"></a>yaffs_VerifySymlink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_VerifySymlink
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
</UL>

<P><STRONG><a name="[a7]"></a>yaffs_VerifySpecial</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_VerifySpecial
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
</UL>

<P><STRONG><a name="[a8]"></a>yaffs_VerifyObjectInDirectory</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RemoveObjectFromDirectory
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyDirectory
</UL>

<P><STRONG><a name="[aa]"></a>yaffs_VerifyDirectory</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectInDirectory
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipFullVerification
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RemoveObjectFromDirectory
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
</UL>

<P><STRONG><a name="[a9]"></a>yaffs_VerifyObject</STRONG> (Thumb, 352 bytes, Stack size 120 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + In Cycle
<LI>Call Chain = yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyDirectory
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifySpecial
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifySymlink
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyHardLink
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFile
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectHeader
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipNANDVerification
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkBit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjects
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectInDirectory
</UL>

<P><STRONG><a name="[ac]"></a>yaffs_VerifyObjects</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = yaffs_VerifyObjects &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObject
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRestore
</UL>

<P><STRONG><a name="[d3]"></a>yaffs_HashFunction</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HashObject
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnhashObject
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByNumber
</UL>

<P><STRONG><a name="[ad]"></a>yaffs_CheckChunkErased</STRONG> (Thumb, 88 bytes, Stack size 96 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = yaffs_CheckChunkErased &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckFF
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
</UL>

<P><STRONG><a name="[c0]"></a>yaffs_HandleWriteChunkOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[af]"></a>yaffs_InvalidateCheckpoint</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_InvalidateCheckpoint &rArr; yaffs_CheckpointInvalidateStream &rArr; yaffs_CheckpointErase
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointInvalidateStream
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
</UL>

<P><STRONG><a name="[b0]"></a>yaffs_RetireBlock</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = yaffs_RetireBlock &rArr; yaffs_MarkBlockBad &rArr; yaffs_TagsCompatabilityMarkNANDBlockBad &rArr; yaffs_WriteChunkToNAND
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InvalidateCheckpoint
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MarkBlockBad
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTags
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_EraseBlockInNAND
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
</UL>

<P><STRONG><a name="[b4]"></a>yaffs_BlockBecameDirty</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = yaffs_BlockBecameDirty &rArr; yaffs_CheckChunkErased &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ClearChunkBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RetireBlock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InvalidateCheckpoint
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkErased
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_EraseBlockInNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>

<P><STRONG><a name="[b8]"></a>yaffs_HandleUpdateChunk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>

<P><STRONG><a name="[b9]"></a>yaffs_HandleWriteChunkError</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = yaffs_HandleWriteChunkError &rArr; yaffs_DeleteChunk &rArr; yaffs_BlockBecameDirty &rArr; yaffs_CheckChunkErased &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleChunkError
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[bc]"></a>yaffs_CalcCheckpointBlocksRequired</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_CalcCheckpointBlocksRequired
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckGarbageCollection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckSpaceForAllocation
</UL>

<P><STRONG><a name="[bb]"></a>yaffs_CheckSpaceForAllocation</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_CheckSpaceForAllocation &rArr; yaffs_CalcCheckpointBlocksRequired
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CalcCheckpointBlocksRequired
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateChunk
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
</UL>

<P><STRONG><a name="[bd]"></a>yaffs_FindBlockForAllocation</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_FindBlockForAllocation
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateChunk
</UL>

<P><STRONG><a name="[be]"></a>yaffs_AllocateChunk</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = yaffs_AllocateChunk &rArr; yaffs_CheckSpaceForAllocation &rArr; yaffs_CalcCheckpointBlocksRequired
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindBlockForAllocation
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckSpaceForAllocation
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetChunkBit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[bf]"></a>yaffs_WriteNewChunkWithTagsToNAND</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = yaffs_WriteNewChunkWithTagsToNAND &rArr; yaffs_HandleWriteChunkError &rArr; yaffs_DeleteChunk &rArr; yaffs_BlockBecameDirty &rArr; yaffs_CheckChunkErased &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateChunk
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleWriteChunkError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InvalidateCheckpoint
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleWriteChunkOk
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkErased
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkWithTagsToNAND
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
</UL>

<P><STRONG><a name="[c2]"></a>yaffs_CalcNameSum</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_CalcNameSum
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetObjectName
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>

<P><STRONG><a name="[c1]"></a>yaffs_SetObjectName</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_SetObjectName &rArr; yaffs_CalcNameSum
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CalcNameSum
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ChangeObjectName
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
</UL>

<P><STRONG><a name="[c3]"></a>yaffs_CreateTnodes</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = yaffs_CreateTnodes &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTnodeRaw
</UL>

<P><STRONG><a name="[c4]"></a>yaffs_GetTnodeRaw</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = yaffs_GetTnodeRaw &rArr; yaffs_CreateTnodes &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateTnodes
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointTnodes
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTnode
</UL>

<P><STRONG><a name="[c5]"></a>yaffs_GetTnode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = yaffs_GetTnode &rArr; yaffs_GetTnodeRaw &rArr; yaffs_CreateTnodes &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTnodeRaw
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddOrFindLevel0Tnode
</UL>

<P><STRONG><a name="[c8]"></a>yaffs_FreeTnode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneFileStructure
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneWorker
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteFile
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteWorker
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteWorker
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddOrFindLevel0Tnode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteFile
</UL>

<P><STRONG><a name="[c6]"></a>yaffs_DeinitialiseTnodes</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_DeinitialiseTnodes &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Deinitialise
</UL>

<P><STRONG><a name="[13f]"></a>yaffs_InitialiseTnodes</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[c7]"></a>yaffs_AddOrFindLevel0Tnode</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = yaffs_AddOrFindLevel0Tnode &rArr; yaffs_GetTnode &rArr; yaffs_GetTnodeRaw &rArr; yaffs_CreateTnodes &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeTnode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTnode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointTnodes
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
</UL>

<P><STRONG><a name="[cb]"></a>yaffs_TagsMatch</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInGroup
</UL>

<P><STRONG><a name="[ca]"></a>yaffs_FindChunkInGroup</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = yaffs_FindChunkInGroup &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsMatch
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkBit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindAndDeleteChunkInFile
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInFile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteWorker
</UL>

<P><STRONG><a name="[cc]"></a>yaffs_DeleteWorker</STRONG> (Thumb, 262 bytes, Stack size 128 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteWorker
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInGroup
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeTnode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetChunkGroupBase
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutLevel0Tnode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteWorker
</UL>

<P><STRONG><a name="[ce]"></a>yaffs_SoftDeleteChunk</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_SoftDeleteChunk
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteWorker
</UL>

<P><STRONG><a name="[cf]"></a>yaffs_SoftDeleteWorker</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = yaffs_SoftDeleteWorker &rArr;  yaffs_SoftDeleteWorker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteWorker
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteChunk
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeTnode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetChunkGroupBase
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutLevel0Tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteFile
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteWorker
</UL>

<P><STRONG><a name="[d0]"></a>yaffs_UnhashObject</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_UnhashObject
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_empty
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HashFunction
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeObject
</UL>

<P><STRONG><a name="[d4]"></a>yaffs_FreeObject</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_FreeObject &rArr; yaffs_UnhashObject
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_empty
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnhashObject
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
</UL>

<P><STRONG><a name="[d5]"></a>yaffs_RemoveObjectFromDirectory</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyDirectory
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectInDirectory
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
</UL>

<P><STRONG><a name="[e6]"></a>yaffs_ObjectHasCachedWriteData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_ObjectHasCachedWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
</UL>

<P><STRONG><a name="[d6]"></a>yaffs_CloneString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = yaffs_CloneString &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
</UL>

<P><STRONG><a name="[d9]"></a>yaffs_CheckObjectDetailsLoaded</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = yaffs_CheckObjectDetailsLoaded &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CloneString
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetObjectName
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetEquivalentObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>

<P><STRONG><a name="[de]"></a>yaffs_GetErasedChunks</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
</UL>

<P><STRONG><a name="[db]"></a>yaffs_FindChunkInFile</STRONG> (Thumb, 78 bytes, Stack size 112 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = yaffs_FindChunkInFile &rArr; yaffs_FindChunkInGroup &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInGroup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindLevel0Tnode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetChunkGroupBase
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkDataFromObject
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
</UL>

<P><STRONG><a name="[dc]"></a>yaffs_PutChunkIntoFile</STRONG> (Thumb, 226 bytes, Stack size 184 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = yaffs_PutChunkIntoFile &rArr; yaffs_DeleteChunk &rArr; yaffs_BlockBecameDirty &rArr; yaffs_CheckChunkErased &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInFile
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddOrFindLevel0Tnode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetChunkGroupBase
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutLevel0Tnode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
</UL>

<P><STRONG><a name="[dd]"></a>yaffs_GarbageCollectBlock</STRONG> (Thumb, 720 bytes, Stack size 168 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInFile
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetErasedChunks
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeTnode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectHeader
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyCollectedBlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyBlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckChunkBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTags
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByNumber
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckGarbageCollection
</UL>

<P><STRONG><a name="[e0]"></a>yaffs_BlockNotDisqualifiedFromGC</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_BlockNotDisqualifiedFromGC
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindBlockForGarbageCollection
</UL>

<P><STRONG><a name="[e1]"></a>yaffs_FindBlockForGarbageCollection</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = yaffs_FindBlockForGarbageCollection &rArr; yaffs_BlockNotDisqualifiedFromGC
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockNotDisqualifiedFromGC
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckGarbageCollection
</UL>

<P><STRONG><a name="[e2]"></a>yaffs_CheckGarbageCollection</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindBlockForGarbageCollection
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CalcCheckpointBlocksRequired
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[e3]"></a>yaffs_UpdateObjectHeader</STRONG> (Thumb, 580 bytes, Stack size 472 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + In Cycle
<LI>Call Chain = yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckGarbageCollection
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckObjectDetailsLoaded
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ObjectHasCachedWriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectHeader
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTags
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ChangeObjectName
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[e7]"></a>yaffs_AddObjectToDirectory</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_empty
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RemoveObjectFromDirectory
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyDirectory
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyObjectInDirectory
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_add
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateInitialDirectories
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleShadowedObject
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointObjectToObject
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateEmptyObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ChangeObjectName
</UL>

<P><STRONG><a name="[ee]"></a>yaffs_ChangeObjectName</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetObjectName
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkFile
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
</UL>

<P><STRONG><a name="[ef]"></a>yaffs_InvalidateWholeChunkCache</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_InvalidateWholeChunkCache
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[df]"></a>yaffs_DoGenericObjectDeletion</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InvalidateWholeChunkCache
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ChangeObjectName
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_RemoveObjectFromDirectory
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeObject
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DestroyObject
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteDirectory
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteSymLink
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteHardLink
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteFile
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GarbageCollectBlock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteFile
</UL>

<P><STRONG><a name="[f0]"></a>yaffs_SoftDeleteFile</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = yaffs_SoftDeleteFile &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteWorker
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeTnode
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkFile
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteFile
</UL>

<P><STRONG><a name="[f1]"></a>yaffs_PruneWorker</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = yaffs_PruneWorker &rArr;  yaffs_PruneWorker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneWorker
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeTnode
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneFileStructure
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneWorker
</UL>

<P><STRONG><a name="[f2]"></a>yaffs_PruneFileStructure</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = yaffs_PruneFileStructure &rArr; yaffs_PruneWorker &rArr;  yaffs_PruneWorker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneWorker
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeTnode
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[f3]"></a>yaffs_CreateFreeObjects</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = yaffs_CreateFreeObjects &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateEmptyObject
</UL>

<P><STRONG><a name="[f4]"></a>yaffs_AllocateEmptyObject</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateFreeObjects
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_add
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
</UL>

<P><STRONG><a name="[f5]"></a>yaffs_HashObject</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_HashObject
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HashFunction
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
</UL>

<P><STRONG><a name="[f7]"></a>yaffs_FindNiceObjectBucket</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_FindNiceObjectBucket
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObjectNumber
</UL>

<P><STRONG><a name="[f6]"></a>yaffs_CreateNewObjectNumber</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_CreateNewObjectNumber &rArr; yaffs_FindNiceObjectBucket
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindNiceObjectBucket
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
</UL>

<P><STRONG><a name="[f8]"></a>yaffs_CreateNewObject</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObjectNumber
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HashObject
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AllocateEmptyObject
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeObject
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTnode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindOrCreateObjectByNumber
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateFakeDirectory
</UL>

<P><STRONG><a name="[fa]"></a>yaffs_CreateFakeDirectory</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = yaffs_CreateFakeDirectory &rArr; yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateInitialDirectories
</UL>

<P><STRONG><a name="[fb]"></a>yaffs_DeinitialiseObjects</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_DeinitialiseObjects &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Deinitialise
</UL>

<P><STRONG><a name="[140]"></a>yaffs_InitialiseObjects</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_InitialiseObjects
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[fc]"></a>yaffs_FindOrCreateObjectByNumber</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = yaffs_FindOrCreateObjectByNumber &rArr; yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleShadowedObject
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointObjects
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointObjectToObject
</UL>

<P><STRONG><a name="[fd]"></a>yaffs_DeleteHardLink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = yaffs_DeleteHardLink &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DestroyObject
</UL>

<P><STRONG><a name="[fe]"></a>yaffs_DeleteSymLink</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = yaffs_DeleteSymLink &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DestroyObject
</UL>

<P><STRONG><a name="[ff]"></a>yaffs_DeleteDirectory</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = yaffs_DeleteDirectory &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_empty
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DestroyObject
</UL>

<P><STRONG><a name="[100]"></a>yaffs_WriteChunkDataToObject</STRONG> (Thumb, 142 bytes, Stack size 184 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckGarbageCollection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInFile
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteNewChunkWithTagsToNAND
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InitialiseTags
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFilesChunkCache
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[101]"></a>yaffs_ReadChunkDataFromObject</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = yaffs_ReadChunkDataFromObject &rArr; yaffs_FindChunkInFile &rArr; yaffs_FindChunkInGroup &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[102]"></a>yaffs_FindAndDeleteChunkInFile</STRONG> (Thumb, 96 bytes, Stack size 112 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = yaffs_FindAndDeleteChunkInFile &rArr; yaffs_FindChunkInGroup &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkInGroup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindLevel0Tnode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetChunkGroupBase
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutLevel0Tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PruneResizedChunks
</UL>

<P><STRONG><a name="[103]"></a>yaffs_PruneResizedChunks</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = yaffs_PruneResizedChunks &rArr; yaffs_DeleteChunk &rArr; yaffs_BlockBecameDirty &rArr; yaffs_CheckChunkErased &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindAndDeleteChunkInFile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[104]"></a>yaffs_FlushFilesChunkCache</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteChunkDataToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GrabChunkCache
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>

<P><STRONG><a name="[107]"></a>yaffs_UnlinkFile</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SoftDeleteFile
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ChangeObjectName
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ResizeFile
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteFile
</UL>

<P><STRONG><a name="[109]"></a>yaffs_DestroyObject</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteDirectory
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteSymLink
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteHardLink
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_StripDeletedObjects
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodObject
</UL>

<P><STRONG><a name="[10a]"></a>yaffs_MknodObject</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = yaffs_MknodObject &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DestroyObject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateNewObject
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CloneString
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeObject
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetObjectName
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_add
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CurrentTime
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodDirectory
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_MknodFile
</UL>

<P><STRONG><a name="[10e]"></a>yaffs_UnlinkWorker</STRONG> (Thumb, 160 bytes, Stack size 280 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_empty
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkFile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteDirectory
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteSymLink
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteHardLink
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DoGenericObjectDeletion
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ChangeObjectName
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_del_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectName
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkObject
</UL>

<P><STRONG><a name="[10f]"></a>yaffs_UnlinkObject</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
</UL>

<P><STRONG><a name="[110]"></a>yaffs_InitialiseBlocks</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = yaffs_InitialiseBlocks &rArr; yaffs_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[111]"></a>yaffs_DeinitialiseBlocks</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_DeinitialiseBlocks &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Deinitialise
</UL>

<P><STRONG><a name="[113]"></a>yaffs_GrabChunkCacheWorker</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GrabChunkCache
</UL>

<P><STRONG><a name="[112]"></a>yaffs_GrabChunkCache</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = yaffs_GrabChunkCache &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GrabChunkCacheWorker
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFilesChunkCache
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
</UL>

<P><STRONG><a name="[115]"></a>yaffs_FindChunkCache</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_FindChunkCache
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_InvalidateChunkCache
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
</UL>

<P><STRONG><a name="[12d]"></a>yaffs_UseChunkCache</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_UseChunkCache
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadDataFromFile
</UL>

<P><STRONG><a name="[114]"></a>yaffs_InvalidateChunkCache</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = yaffs_InvalidateChunkCache &rArr; yaffs_FindChunkCache
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindChunkCache
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteDataToFile
</UL>

<P><STRONG><a name="[116]"></a>yaffs_WriteCheckpointValidityMarker</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointData
</UL>

<P><STRONG><a name="[117]"></a>yaffs_ReadCheckpointValidityMarker</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = yaffs_ReadCheckpointValidityMarker &rArr; yaffs_CheckpointRead &rArr; yaffs_CheckpointFindNextCheckpointBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRead
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointData
</UL>

<P><STRONG><a name="[119]"></a>yaffs_DeviceToCheckpointDevice</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointDevice
</UL>

<P><STRONG><a name="[11b]"></a>yaffs_CheckpointDeviceToDevice</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointDevice
</UL>

<P><STRONG><a name="[118]"></a>yaffs_WriteCheckpointDevice</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeviceToCheckpointDevice
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointData
</UL>

<P><STRONG><a name="[11a]"></a>yaffs_ReadCheckpointDevice</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = yaffs_ReadCheckpointDevice &rArr; yaffs_CheckpointRead &rArr; yaffs_CheckpointFindNextCheckpointBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointDeviceToDevice
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRead
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointData
</UL>

<P><STRONG><a name="[121]"></a>yaffs_ObjectToCheckpointObject</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointObjects
</UL>

<P><STRONG><a name="[11c]"></a>yaffs_CheckpointObjectToObject</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = yaffs_CheckpointObjectToObject &rArr; yaffs_FindOrCreateObjectByNumber &rArr; yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindOrCreateObjectByNumber
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointObjects
</UL>

<P><STRONG><a name="[11d]"></a>yaffs_CheckpointTnodeWorker</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointTnodeWorker
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointTnodes
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointTnodeWorker
</UL>

<P><STRONG><a name="[11e]"></a>yaffs_WriteCheckpointTnodes</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointTnodeWorker
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointObjects
</UL>

<P><STRONG><a name="[11f]"></a>yaffs_ReadCheckpointTnodes</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = yaffs_ReadCheckpointTnodes &rArr; yaffs_CheckpointRead &rArr; yaffs_CheckpointFindNextCheckpointBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddOrFindLevel0Tnode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTnodeRaw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRead
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointObjects
</UL>

<P><STRONG><a name="[120]"></a>yaffs_WriteCheckpointObjects</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointTnodes
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ObjectToCheckpointObject
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointWrite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointData
</UL>

<P><STRONG><a name="[122]"></a>yaffs_HardlinkFixup</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = yaffs_HardlinkFixup &rArr; yaffs_FindObjectByNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_add
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointObjects
</UL>

<P><STRONG><a name="[123]"></a>yaffs_ReadCheckpointObjects</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = yaffs_ReadCheckpointObjects &rArr; yaffs_CheckpointObjectToObject &rArr; yaffs_FindOrCreateObjectByNumber &rArr; yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HardlinkFixup
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointTnodes
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointObjectToObject
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindOrCreateObjectByNumber
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRead
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointData
</UL>

<P><STRONG><a name="[124]"></a>yaffs_WriteCheckpointSum</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetCheckpointSum
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointData
</UL>

<P><STRONG><a name="[126]"></a>yaffs_ReadCheckpointSum</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = yaffs_ReadCheckpointSum &rArr; yaffs_CheckpointRead &rArr; yaffs_CheckpointFindNextCheckpointBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetCheckpointSum
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointData
</UL>

<P><STRONG><a name="[127]"></a>yaffs_WriteCheckpointData</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointSum
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointObjects
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointDevice
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_WriteCheckpointValidityMarker
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointClose
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointOpen
</UL>

<P><STRONG><a name="[128]"></a>yaffs_ReadCheckpointData</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = yaffs_ReadCheckpointData &rArr; yaffs_ReadCheckpointObjects &rArr; yaffs_CheckpointObjectToObject &rArr; yaffs_FindOrCreateObjectByNumber &rArr; yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointSum
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointObjects
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointDevice
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadCheckpointValidityMarker
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointClose
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRestore
</UL>

<P><STRONG><a name="[129]"></a>yaffs_CountFreeChunks</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_CountFreeChunks
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_VerifyFreeChunks
</UL>

<P><STRONG><a name="[12a]"></a>yaffs_VerifyFreeChunks</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_VerifyFreeChunks &rArr; yaffs_CountFreeChunks
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CountFreeChunks
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SkipVerification
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckpointRestore
</UL>

<P><STRONG><a name="[130]"></a>yaffs_HandleShadowedObject</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = yaffs_HandleShadowedObject &rArr; yaffs_FindOrCreateObjectByNumber &rArr; yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindOrCreateObjectByNumber
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
</UL>

<P><STRONG><a name="[36]"></a>ybicmp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ybicmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_guts.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>yaffs_StripDeletedObjects</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = yaffs_StripDeletedObjects &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DestroyObject
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[132]"></a>yaffs_Scan</STRONG> (Thumb, 1248 bytes, Stack size 168 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = yaffs_Scan &rArr; yaffs_DestroyObject &rArr; yaffs_DeleteFile &rArr; yaffs_UnlinkFile &rArr; yaffs_ResizeFile &rArr; yaffs_FlushFilesChunkCache &rArr; yaffs_WriteChunkDataToObject &rArr; yaffs_CheckGarbageCollection &rArr; yaffs_GarbageCollectBlock &rArr; yaffs_DoGenericObjectDeletion &rArr; yaffs_ChangeObjectName &rArr; yaffs_UpdateObjectHeader &rArr;  yaffs_CheckGarbageCollection (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ClearChunkBits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HardlinkFixup
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DestroyObject
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindOrCreateObjectByNumber
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UpdateObjectHeader
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CloneString
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetObjectName
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetChunkBit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_QueryInitialBlockState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByNumber
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[134]"></a>yaffs_ScanBackwards</STRONG> (Thumb, 1756 bytes, Stack size 192 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = yaffs_ScanBackwards &rArr; yaffs_PutChunkIntoFile &rArr; yaffs_DeleteChunk &rArr; yaffs_BlockBecameDirty &rArr; yaffs_CheckChunkErased &rArr; yaffs_ReadChunkWithTagsFromNAND &rArr; yaffs_TagsCompatabilityReadChunkWithTagsFromNAND &rArr; yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ClearChunkBits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleShadowedObject
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HardlinkFixup
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindOrCreateObjectByNumber
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PutChunkIntoFile
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CloneString
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetObjectName
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_SetChunkBit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetBlockInfo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkWithTagsFromNAND
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_QueryInitialBlockState
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteChunk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReleaseTempBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetTempBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[13b]"></a>yaffs_CheckDevFunctions</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[137]"></a>yaffs_CreateInitialDirectories</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = yaffs_CreateInitialDirectories &rArr; yaffs_CreateFakeDirectory &rArr; yaffs_CreateNewObject &rArr; yaffs_AllocateEmptyObject &rArr; yaffs_AddObjectToDirectory &rArr; yaffs_RemoveObjectFromDirectory &rArr; yaffs_VerifyDirectory &rArr; yaffs_VerifyObjectInDirectory &rArr; yaffs_VerifyObject &rArr;  yaffs_VerifyDirectory (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CreateFakeDirectory
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[13c]"></a>yaffs_CheckStructures</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GutsInitialise
</UL>

<P><STRONG><a name="[d1]"></a>ylist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnlinkWorker
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DeleteDirectory
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_AddObjectToDirectory
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FreeObject
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnhashObject
</UL>

<P><STRONG><a name="[b5]"></a>yaffs_ClearChunkBits</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_ClearChunkBits &rArr; yaffs_BlockBits
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBits
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ScanBackwards
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Scan
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_BlockBecameDirty
</UL>

<P><STRONG><a name="[147]"></a>yaffs_DumpPackedTags2TagsPart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2TagsPart
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PackTags2TagsPart
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DumpPackedTags2
</UL>

<P><STRONG><a name="[146]"></a>yaffs_DumpPackedTags2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_DumpPackedTags2
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_DumpPackedTags2TagsPart
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2
</UL>

<P><STRONG><a name="[149]"></a>yaffs_DumpTags2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_UnpackTags2TagsPart
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_PackTags2TagsPart
</UL>

<P><STRONG><a name="[14c]"></a>swapfunc</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, yaffs_qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = swapfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
</UL>

<P><STRONG><a name="[14d]"></a>med3</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, yaffs_qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = med3
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
</UL>

<P><STRONG><a name="[152]"></a>yaffs_LoadTagsIntoSpare</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = yaffs_LoadTagsIntoSpare &rArr; yaffs_CalcTagsECC
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CalcTagsECC
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityWriteChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[153]"></a>yaffs_GetTagsFromSpare</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = yaffs_GetTagsFromSpare &rArr; yaffs_CheckECCOnTags &rArr; yaffs_CalcTagsECC
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_CheckECCOnTags
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityReadChunkWithTagsFromNAND
</UL>

<P><STRONG><a name="[154]"></a>yaffs_SpareInitialise</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_SpareInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityWriteChunkWithTagsToNAND
</UL>

<P><STRONG><a name="[157]"></a>yaffs_WriteChunkToNAND</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_WriteChunkToNAND
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityWriteChunkWithTagsToNAND
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityMarkNANDBlockBad
</UL>

<P><STRONG><a name="[156]"></a>yaffs_HandleReadDataError</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_HandleReadDataError
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ReadChunkFromNAND
</UL>

<P><STRONG><a name="[155]"></a>yaffs_ReadChunkFromNAND</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yaffs_ReadChunkFromNAND &rArr; yaffs_ECCCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCorrect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ECCCalculate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_HandleReadDataError
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityReadChunkWithTagsFromNAND
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_TagsCompatabilityQueryNANDBlock
</UL>

<P><STRONG><a name="[172]"></a>yaffsfs_InitHandles</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_initialise
</UL>

<P><STRONG><a name="[15f]"></a>yaffsfs_GetHandle</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_GetHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandlePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
</UL>

<P><STRONG><a name="[160]"></a>yaffsfs_PutHandle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_PutHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandlePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
</UL>

<P><STRONG><a name="[161]"></a>yaffsfs_FindDevice</STRONG> (Thumb, 172 bytes, Stack size 36 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = yaffsfs_FindDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Match
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindRoot
</UL>

<P><STRONG><a name="[164]"></a>yaffsfs_FindRoot</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = yaffsfs_FindRoot &rArr; yaffsfs_FindDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
</UL>

<P><STRONG><a name="[165]"></a>yaffsfs_DoFindDirectory</STRONG> (Thumb, 210 bytes, Stack size 288 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + In Cycle
<LI>Call Chain = yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindRoot
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>

<P><STRONG><a name="[167]"></a>yaffsfs_FindDirectory</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[168]"></a>yaffsfs_FindObject</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = yaffsfs_FindObject &rArr; yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FindObjectByName
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
</UL>

<P><STRONG><a name="[166]"></a>yaffsfs_FollowLink</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = yaffsfs_FollowLink &rArr; yaffsfs_FindObject &rArr; yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
</UL>

<P><STRONG><a name="[16c]"></a>yaffsfs_DoStat</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectFileLength
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetEquivalentObject
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetObjectLinkCount
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[16e]"></a>yaffsfs_DoStatOrLStat</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
</UL>

<P><STRONG><a name="[16f]"></a>yaffsfs_DoChMod</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_FlushFile
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_GetEquivalentObject
</UL>

<P><STRONG><a name="[170]"></a>yaffsfs_DirAdvance</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_DirAdvance
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_RemoveObjectCallback
</UL>

<P><STRONG><a name="[3d]"></a>yaffsfs_RemoveObjectCallback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffsfs_RemoveObjectCallback &rArr; yaffsfs_DirAdvance
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DirAdvance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffsfs.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>yaffsfs_SetDirRewound</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ylist_empty
</UL>

<P><STRONG><a name="[171]"></a>ylist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetDirRewound
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DirAdvance
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\debug_frmwrk.o --asm_dir=.\ --list_dir=.\ --depend=.\flash\debug_frmwrk.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\CM3_lib -I..\Drivers -I..\Startup -I.\Easy_web -I.\Lcd_Drv -I.\IIC_Test -I.\USU_Host -I.\Nand_Test -I.\FATFS_R0.08 -I..\fs -I"D:\Program Files\mdk\ARM\RV31\INC" -I"D:\Program Files\mdk\pack\ARM\CMSIS\4.1.1\CMSIS\Include" -I"D:\Program Files\mdk\ARM\Inc\NXP\LPC177x_8x" -D__MICROLIB --omf_browse=.\flash\debug_frmwrk.crf ..\Drivers\debug_frmwrk.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UARTPutChar PROC
;;;48      **********************************************************************/
;;;49     void UARTPutChar (LPC_UART_TypeDef *UARTx, uint8_t ch)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51     	UART_Send(UARTx, &ch, 1, BLOCKING);
000004  2301              MOVS     r3,#1
000006  461a              MOV      r2,r3
000008  a901              ADD      r1,sp,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       UART_Send
;;;52     }
000010  bd1c              POP      {r2-r4,pc}
;;;53     
                          ENDP

                  UARTGetKey PROC
;;;59      **********************************************************************/
;;;60     uint8_t UARTGetKey (LPC_UART_TypeDef *UARTx)
000012  b538              PUSH     {r3-r5,lr}
;;;61     {
000014  4604              MOV      r4,r0
;;;62     	uint8_t tmp = 0;
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
;;;63     
;;;64     	UART_Receive(UARTx, &tmp, 1, NONE_BLOCKING);	 //yj
00001a  2300              MOVS     r3,#0
00001c  2201              MOVS     r2,#1
00001e  4669              MOV      r1,sp
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       UART_Receive
;;;65     
;;;66     	return(tmp);
000026  f89d0000          LDRB     r0,[sp,#0]
;;;67     }
00002a  bd38              POP      {r3-r5,pc}
;;;68     
                          ENDP

                  UARTGetChar PROC
;;;73      **********************************************************************/
;;;74     uint8_t UARTGetChar (LPC_UART_TypeDef *UARTx)
00002c  b538              PUSH     {r3-r5,lr}
;;;75     {
00002e  4604              MOV      r4,r0
;;;76     	uint8_t tmp = 0;
000030  2000              MOVS     r0,#0
000032  9000              STR      r0,[sp,#0]
;;;77     
;;;78     	UART_Receive(UARTx, &tmp, 1, BLOCKING);	 //yj
000034  2301              MOVS     r3,#1
000036  461a              MOV      r2,r3
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       UART_Receive
;;;79     
;;;80     	return(tmp);
000040  f89d0000          LDRB     r0,[sp,#0]
;;;81     }
000044  bd38              POP      {r3-r5,pc}
;;;82     
                          ENDP

                  UARTPuts PROC
;;;245     **********************************************************************/
;;;246    void UARTPuts(LPC_UART_TypeDef *UARTx, const void *str)
000046  b570              PUSH     {r4-r6,lr}
;;;247    {
000048  4606              MOV      r6,r0
00004a  460d              MOV      r5,r1
;;;248    	uint8_t *s = (uint8_t *) str;
00004c  462c              MOV      r4,r5
;;;249    
;;;250    	while (*s)
00004e  e004              B        |L1.90|
                  |L1.80|
;;;251    	{
;;;252    		UARTPutChar(UARTx, *s++);
000050  f8141b01          LDRB     r1,[r4],#1
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       UARTPutChar
                  |L1.90|
00005a  7820              LDRB     r0,[r4,#0]            ;250
00005c  2800              CMP      r0,#0                 ;250
00005e  d1f7              BNE      |L1.80|
;;;253    	}
;;;254    }
000060  bd70              POP      {r4-r6,pc}
;;;255    
                          ENDP

                  UARTGetValue PROC
;;;87      **********************************************************************/
;;;88     uint8_t UARTGetValue (LPC_UART_TypeDef *UARTx, uint8_t option,
000062  e92d4fff          PUSH     {r0-r11,lr}
;;;89     												uint8_t numCh, uint32_t* val)
;;;90     {
000066  b083              SUB      sp,sp,#0xc
000068  460c              MOV      r4,r1
00006a  4615              MOV      r5,r2
00006c  461e              MOV      r6,r3
;;;91     	uint8_t tmpCh = 0, cnt, factor, isValidCh = FALSE;
00006e  2000              MOVS     r0,#0
000070  9002              STR      r0,[sp,#8]
000072  9001              STR      r0,[sp,#4]
;;;92     	uint32_t tmpVal, rVal, cntFailed, multiplier;
;;;93     
;;;94     	//it does not get any value
;;;95     	if(numCh <= 0)
000074  2d00              CMP      r5,#0
000076  dc03              BGT      |L1.128|
;;;96     	{
;;;97     		*val = 0;
000078  6030              STR      r0,[r6,#0]
                  |L1.122|
;;;98     		return 0;
;;;99     	}
;;;100    
;;;101    	cntFailed = 0;
;;;102    
;;;103    	// To store the multiplier of Decimal (10) or Heximal (16)
;;;104    	factor = (option == DBG_GETVAL_IN_HEX) ? 16 : ((option == DBG_GETVAL_IN_DEC) ? 10 : 0);
;;;105    
;;;106    	if (factor == 0)
;;;107    	{
;;;108    		*val = 0;
;;;109    
;;;110    		return 0;
;;;111    	}
;;;112    
;;;113    	rVal = 0;
;;;114    
;;;115    	while (numCh > 0)
;;;116    	{
;;;117    		isValidCh = TRUE;
;;;118    
;;;119    		UART_Receive(UARTx, &tmpCh, 1, NONE_BLOCKING);
;;;120    
;;;121    		if((tmpCh >= '0') && (tmpCh<= '9'))
;;;122    		{
;;;123    			tmpVal = (uint32_t) (tmpCh - '0');
;;;124    		}
;;;125    		else if (option == DBG_GETVAL_IN_HEX)
;;;126    		{
;;;127    			factor = 16;
;;;128    
;;;129    			switch (tmpCh)
;;;130    			{
;;;131    				case 'a':
;;;132    
;;;133    				case 'A':
;;;134    					tmpVal = 10;
;;;135    
;;;136    					break;
;;;137    
;;;138    				case 'b':
;;;139    
;;;140    				case 'B':
;;;141    					tmpVal = 11;
;;;142    
;;;143    					break;
;;;144    
;;;145    				case 'c':
;;;146    
;;;147    				case 'C':
;;;148    					tmpVal = 12;
;;;149    
;;;150    					break;
;;;151    
;;;152    				case 'd':
;;;153    
;;;154    				case 'D':
;;;155    					tmpVal = 13;
;;;156    
;;;157    					break;
;;;158    
;;;159    				case 'e':
;;;160    
;;;161    				case 'E':
;;;162    					tmpVal = 14;
;;;163    
;;;164    					break;
;;;165    
;;;166    				case 'f':
;;;167    
;;;168    				case 'F':
;;;169    					tmpVal = 15;
;;;170    
;;;171    					break;
;;;172    
;;;173    				default:
;;;174    					isValidCh = FALSE;
;;;175    					break;
;;;176    			}
;;;177    		}
;;;178    		else
;;;179    		{
;;;180    			isValidCh = FALSE;
;;;181    		}
;;;182    
;;;183    		multiplier = 1;
;;;184    
;;;185    		if(isValidCh == FALSE)
;;;186    		{
;;;187    			if(option == DBG_GETVAL_IN_DEC)
;;;188    			{
;;;189    				UARTPuts(UARTx, "Please enter a char from '0' to '9'!!!\r\n");
;;;190    			}
;;;191    			else if (option == DBG_GETVAL_IN_HEX)
;;;192    			{
;;;193    				UARTPuts(UARTx, "Please enter a char from '0' to '9', and 'a/A', 'b/B', c/C', 'd/D', 'e/E' and 'f/F'!!!\r\n");
;;;194    			}
;;;195    
;;;196    			cntFailed ++;
;;;197    
;;;198    			if(cntFailed >= NUM_SKIPPED_ALLOWED)
;;;199    			{
;;;200    				UARTPuts(UARTx, "Reach limitation of re-tries. Return FAILED\r\n");
;;;201    
;;;202    				//it's failed, should return
;;;203    				return 0;
;;;204    			}
;;;205    		}
;;;206    		else
;;;207    		{
;;;208    			//Echo the character to the terminal
;;;209    			UARTPutChar(UARTx, tmpCh);
;;;210    
;;;211    			if(numCh == 1)
;;;212    			{
;;;213    				factor = 1;
;;;214    				multiplier = 1;
;;;215    			}
;;;216    			else
;;;217    			{
;;;218    				for(cnt = 1; cnt < numCh; cnt++)
;;;219    				{
;;;220    					multiplier *= factor;
;;;221    				}
;;;222    			}
;;;223    
;;;224    			tmpVal *= multiplier;
;;;225    
;;;226    			//Update the value return
;;;227    			rVal += tmpVal;
;;;228    
;;;229    			numCh --;
;;;230    		}
;;;231    	}
;;;232    
;;;233    	*val = rVal;
;;;234    
;;;235    	return(1);
;;;236    }
00007a  b007              ADD      sp,sp,#0x1c
00007c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.128|
000080  f04f0800          MOV      r8,#0                 ;101
000084  2c01              CMP      r4,#1                 ;104
000086  d101              BNE      |L1.140|
000088  2010              MOVS     r0,#0x10              ;104
00008a  e003              B        |L1.148|
                  |L1.140|
00008c  b90c              CBNZ     r4,|L1.146|
00008e  200a              MOVS     r0,#0xa               ;104
000090  e000              B        |L1.148|
                  |L1.146|
000092  2000              MOVS     r0,#0                 ;104
                  |L1.148|
000094  4682              MOV      r10,r0                ;104
000096  f1ba0f00          CMP      r10,#0                ;106
00009a  d102              BNE      |L1.162|
00009c  2000              MOVS     r0,#0                 ;108
00009e  6030              STR      r0,[r6,#0]            ;108
0000a0  e7eb              B        |L1.122|
                  |L1.162|
0000a2  2700              MOVS     r7,#0                 ;113
0000a4  e085              B        |L1.434|
                  |L1.166|
0000a6  2001              MOVS     r0,#1                 ;117
0000a8  9001              STR      r0,[sp,#4]            ;117
0000aa  2300              MOVS     r3,#0                 ;119
0000ac  2201              MOVS     r2,#1                 ;119
0000ae  a902              ADD      r1,sp,#8              ;119
0000b0  9803              LDR      r0,[sp,#0xc]          ;119
0000b2  f7fffffe          BL       UART_Receive
0000b6  f89d0008          LDRB     r0,[sp,#8]            ;121
0000ba  2830              CMP      r0,#0x30              ;121
0000bc  db08              BLT      |L1.208|
0000be  f89d0008          LDRB     r0,[sp,#8]            ;121
0000c2  2839              CMP      r0,#0x39              ;121
0000c4  dc04              BGT      |L1.208|
0000c6  f89d0008          LDRB     r0,[sp,#8]            ;123
0000ca  f1a00b30          SUB      r11,r0,#0x30          ;123
0000ce  e037              B        |L1.320|
                  |L1.208|
0000d0  2c01              CMP      r4,#1                 ;125
0000d2  d133              BNE      |L1.316|
0000d4  f04f0a10          MOV      r10,#0x10             ;127
0000d8  f89d0008          LDRB     r0,[sp,#8]            ;129
0000dc  2861              CMP      r0,#0x61              ;129
0000de  d011              BEQ      |L1.260|
0000e0  dc08              BGT      |L1.244|
0000e2  f1a00041          SUB      r0,r0,#0x41           ;129
0000e6  2806              CMP      r0,#6                 ;129
0000e8  d224              BCS      |L1.308|
0000ea  e8dff000          TBB      [pc,r0]               ;129
0000ee  0c10              DCB      0x0c,0x10
0000f0  14181c20          DCB      0x14,0x18,0x1c,0x20
                  |L1.244|
0000f4  3862              SUBS     r0,r0,#0x62           ;129
0000f6  2805              CMP      r0,#5                 ;129
0000f8  d21c              BCS      |L1.308|
0000fa  e8dff000          TBB      [pc,r0]               ;129
0000fe  070b              DCB      0x07,0x0b
000100  0f131700          DCB      0x0f,0x13,0x17,0x00
                  |L1.260|
000104  bf00              NOP                            ;133
000106  f04f0b0a          MOV      r11,#0xa              ;134
00010a  e016              B        |L1.314|
00010c  bf00              NOP                            ;140
00010e  f04f0b0b          MOV      r11,#0xb              ;141
000112  e012              B        |L1.314|
000114  bf00              NOP                            ;147
000116  f04f0b0c          MOV      r11,#0xc              ;148
00011a  e00e              B        |L1.314|
00011c  bf00              NOP                            ;154
00011e  f04f0b0d          MOV      r11,#0xd              ;155
000122  e00a              B        |L1.314|
000124  bf00              NOP                            ;161
000126  f04f0b0e          MOV      r11,#0xe              ;162
00012a  e006              B        |L1.314|
00012c  bf00              NOP                            ;168
00012e  f04f0b0f          MOV      r11,#0xf              ;169
000132  e002              B        |L1.314|
                  |L1.308|
000134  2000              MOVS     r0,#0                 ;174
000136  9001              STR      r0,[sp,#4]            ;174
000138  bf00              NOP                            ;175
                  |L1.314|
00013a  e001              B        |L1.320|
                  |L1.316|
00013c  2000              MOVS     r0,#0                 ;180
00013e  9001              STR      r0,[sp,#4]            ;180
                  |L1.320|
000140  2001              MOVS     r0,#1                 ;183
000142  9000              STR      r0,[sp,#0]            ;183
000144  9801              LDR      r0,[sp,#4]            ;185
000146  b9b0              CBNZ     r0,|L1.374|
000148  b924              CBNZ     r4,|L1.340|
00014a  a1f5              ADR      r1,|L1.1312|
00014c  9803              LDR      r0,[sp,#0xc]          ;189
00014e  f7fffffe          BL       UARTPuts
000152  e005              B        |L1.352|
                  |L1.340|
000154  2c01              CMP      r4,#1                 ;191
000156  d103              BNE      |L1.352|
000158  49fc              LDR      r1,|L1.1356|
00015a  9803              LDR      r0,[sp,#0xc]          ;193
00015c  f7fffffe          BL       UARTPuts
                  |L1.352|
000160  f1080801          ADD      r8,r8,#1              ;196
000164  f1b80f0a          CMP      r8,#0xa               ;198
000168  d323              BCC      |L1.434|
00016a  a1f9              ADR      r1,|L1.1360|
00016c  9803              LDR      r0,[sp,#0xc]          ;200
00016e  f7fffffe          BL       UARTPuts
000172  2000              MOVS     r0,#0                 ;203
000174  e781              B        |L1.122|
                  |L1.374|
000176  f89d1008          LDRB     r1,[sp,#8]            ;209
00017a  9803              LDR      r0,[sp,#0xc]          ;209
00017c  f7fffffe          BL       UARTPutChar
000180  2d01              CMP      r5,#1                 ;211
000182  d103              BNE      |L1.396|
000184  46aa              MOV      r10,r5                ;213
000186  2001              MOVS     r0,#1                 ;214
000188  9000              STR      r0,[sp,#0]            ;214
00018a  e00c              B        |L1.422|
                  |L1.396|
00018c  f04f0901          MOV      r9,#1                 ;218
000190  e007              B        |L1.418|
                  |L1.402|
000192  9800              LDR      r0,[sp,#0]            ;220
000194  fb00f00a          MUL      r0,r0,r10             ;220
000198  9000              STR      r0,[sp,#0]            ;220
00019a  f1090001          ADD      r0,r9,#1              ;218
00019e  f00009ff          AND      r9,r0,#0xff           ;218
                  |L1.418|
0001a2  45a9              CMP      r9,r5                 ;218
0001a4  dbf5              BLT      |L1.402|
                  |L1.422|
0001a6  9800              LDR      r0,[sp,#0]            ;224
0001a8  fb0bfb00          MUL      r11,r11,r0            ;224
0001ac  445f              ADD      r7,r7,r11             ;227
0001ae  1e68              SUBS     r0,r5,#1              ;229
0001b0  b2c5              UXTB     r5,r0                 ;229
                  |L1.434|
0001b2  2d00              CMP      r5,#0                 ;115
0001b4  f73faf77          BGT      |L1.166|
0001b8  6037              STR      r7,[r6,#0]            ;233
0001ba  2001              MOVS     r0,#1                 ;235
0001bc  e75d              B        |L1.122|
;;;237    
                          ENDP

                  UARTPuts_ PROC
;;;262     **********************************************************************/
;;;263    void UARTPuts_(LPC_UART_TypeDef *UARTx, const void *str)
0001be  b570              PUSH     {r4-r6,lr}
;;;264    {
0001c0  4604              MOV      r4,r0
0001c2  460d              MOV      r5,r1
;;;265    	UARTPuts (UARTx, str);
0001c4  4629              MOV      r1,r5
0001c6  4620              MOV      r0,r4
0001c8  f7fffffe          BL       UARTPuts
;;;266    	UARTPuts (UARTx, "\n\r");
0001cc  a1ec              ADR      r1,|L1.1408|
0001ce  4620              MOV      r0,r4
0001d0  f7fffffe          BL       UARTPuts
;;;267    }
0001d4  bd70              POP      {r4-r6,pc}
;;;268    
                          ENDP

                  UARTPutDec PROC
;;;275     **********************************************************************/
;;;276    void UARTPutDec(LPC_UART_TypeDef *UARTx, uint8_t decnum)
0001d6  e92d41f0          PUSH     {r4-r8,lr}
;;;277    {
0001da  4605              MOV      r5,r0
0001dc  460c              MOV      r4,r1
;;;278    	uint8_t c1=decnum%10;
0001de  200a              MOVS     r0,#0xa
0001e0  fb94f1f0          SDIV     r1,r4,r0
0001e4  fb004011          MLS      r0,r0,r1,r4
0001e8  b2c6              UXTB     r6,r0
;;;279    	uint8_t c2=(decnum/10)%10;
0001ea  200a              MOVS     r0,#0xa
0001ec  fb94f0f0          SDIV     r0,r4,r0
0001f0  210a              MOVS     r1,#0xa
0001f2  fb90f2f1          SDIV     r2,r0,r1
0001f6  fb010012          MLS      r0,r1,r2,r0
0001fa  b2c7              UXTB     r7,r0
;;;280    //	uint8_t c3=(decnum/100)%10;
;;;281    //	UARTPutChar(UARTx, '0'+c3);
;;;282    	UARTPutChar(UARTx, '0'+c2);
0001fc  f1070030          ADD      r0,r7,#0x30
000200  b2c1              UXTB     r1,r0
000202  4628              MOV      r0,r5
000204  f7fffffe          BL       UARTPutChar
;;;283    	UARTPutChar(UARTx, '0'+c1);
000208  f1060030          ADD      r0,r6,#0x30
00020c  b2c1              UXTB     r1,r0
00020e  4628              MOV      r0,r5
000210  f7fffffe          BL       UARTPutChar
;;;284    }
000214  e8bd81f0          POP      {r4-r8,pc}
;;;285    
                          ENDP

                  UARTPutDec16 PROC
;;;291     **********************************************************************/
;;;292    void UARTPutDec16(LPC_UART_TypeDef *UARTx, uint16_t decnum)
000218  e92d47f0          PUSH     {r4-r10,lr}
;;;293    {
00021c  4605              MOV      r5,r0
00021e  460c              MOV      r4,r1
;;;294    	uint8_t c1=decnum%10;
000220  200a              MOVS     r0,#0xa
000222  fb94f1f0          SDIV     r1,r4,r0
000226  fb004011          MLS      r0,r0,r1,r4
00022a  b2c6              UXTB     r6,r0
;;;295    	uint8_t c2=(decnum/10)%10;
00022c  200a              MOVS     r0,#0xa
00022e  fb94f0f0          SDIV     r0,r4,r0
000232  210a              MOVS     r1,#0xa
000234  fb90f2f1          SDIV     r2,r0,r1
000238  fb010012          MLS      r0,r1,r2,r0
00023c  b2c7              UXTB     r7,r0
;;;296    	uint8_t c3=(decnum/100)%10;
00023e  2064              MOVS     r0,#0x64
000240  fb94f0f0          SDIV     r0,r4,r0
000244  fb90f2f1          SDIV     r2,r0,r1
000248  fb010012          MLS      r0,r1,r2,r0
00024c  f00008ff          AND      r8,r0,#0xff
;;;297    	uint8_t c4=(decnum/1000)%10;
000250  f44f707a          MOV      r0,#0x3e8
000254  fb94f0f0          SDIV     r0,r4,r0
000258  fb90f2f1          SDIV     r2,r0,r1
00025c  fb010012          MLS      r0,r1,r2,r0
000260  f00009ff          AND      r9,r0,#0xff
;;;298    	uint8_t c5=(decnum/10000)%10;
000264  f2427010          MOV      r0,#0x2710
000268  fb94f0f0          SDIV     r0,r4,r0
00026c  fb90f2f1          SDIV     r2,r0,r1
000270  fb010012          MLS      r0,r1,r2,r0
000274  f0000aff          AND      r10,r0,#0xff
;;;299    //	UARTPutChar(UARTx, '0'+c5);
;;;300    	UARTPutChar(UARTx, '0'+c4);
000278  f1090030          ADD      r0,r9,#0x30
00027c  b2c1              UXTB     r1,r0
00027e  4628              MOV      r0,r5
000280  f7fffffe          BL       UARTPutChar
;;;301    	UARTPutChar(UARTx, '0'+c3);
000284  f1080030          ADD      r0,r8,#0x30
000288  b2c1              UXTB     r1,r0
00028a  4628              MOV      r0,r5
00028c  f7fffffe          BL       UARTPutChar
;;;302    	UARTPutChar(UARTx, '0'+c2);
000290  f1070030          ADD      r0,r7,#0x30
000294  b2c1              UXTB     r1,r0
000296  4628              MOV      r0,r5
000298  f7fffffe          BL       UARTPutChar
;;;303    	UARTPutChar(UARTx, '0'+c1);
00029c  f1060030          ADD      r0,r6,#0x30
0002a0  b2c1              UXTB     r1,r0
0002a2  4628              MOV      r0,r5
0002a4  f7fffffe          BL       UARTPutChar
;;;304    }
0002a8  e8bd87f0          POP      {r4-r10,pc}
;;;305    
                          ENDP

                  UARTPutDec32 PROC
;;;311     **********************************************************************/
;;;312    void UARTPutDec32(LPC_UART_TypeDef *UARTx, uint32_t decnum)
0002ac  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;313    {
0002b0  b083              SUB      sp,sp,#0xc
0002b2  460c              MOV      r4,r1
;;;314    	uint8_t c1=decnum%10;
0002b4  200a              MOVS     r0,#0xa
0002b6  fbb4f1f0          UDIV     r1,r4,r0
0002ba  fb004511          MLS      r5,r0,r1,r4
;;;315    	uint8_t c2=(decnum/10)%10;
0002be  fbb4f0f0          UDIV     r0,r4,r0
0002c2  210a              MOVS     r1,#0xa
0002c4  fbb0f2f1          UDIV     r2,r0,r1
0002c8  fb010612          MLS      r6,r1,r2,r0
;;;316    	uint8_t c3=(decnum/100)%10;
0002cc  2064              MOVS     r0,#0x64
0002ce  fbb4f0f0          UDIV     r0,r4,r0
0002d2  fbb0f2f1          UDIV     r2,r0,r1
0002d6  fb010712          MLS      r7,r1,r2,r0
;;;317    	uint8_t c4=(decnum/1000)%10;
0002da  f44f707a          MOV      r0,#0x3e8
0002de  fbb4f0f0          UDIV     r0,r4,r0
0002e2  fbb0f2f1          UDIV     r2,r0,r1
0002e6  fb010812          MLS      r8,r1,r2,r0
;;;318    	uint8_t c5=(decnum/10000)%10;
0002ea  f2427010          MOV      r0,#0x2710
0002ee  fbb4f0f0          UDIV     r0,r4,r0
0002f2  fbb0f2f1          UDIV     r2,r0,r1
0002f6  fb010912          MLS      r9,r1,r2,r0
;;;319    	uint8_t c6=(decnum/100000)%10;
0002fa  48a2              LDR      r0,|L1.1412|
0002fc  fbb4f0f0          UDIV     r0,r4,r0
000300  fbb0f2f1          UDIV     r2,r0,r1
000304  fb010a12          MLS      r10,r1,r2,r0
;;;320    	uint8_t c7=(decnum/1000000)%10;
000308  489f              LDR      r0,|L1.1416|
00030a  fbb4f0f0          UDIV     r0,r4,r0
00030e  fbb0f2f1          UDIV     r2,r0,r1
000312  fb010b12          MLS      r11,r1,r2,r0
;;;321    	uint8_t c8=(decnum/10000000)%10;
000316  489d              LDR      r0,|L1.1420|
000318  fbb4f0f0          UDIV     r0,r4,r0
00031c  fbb0f2f1          UDIV     r2,r0,r1
000320  fb010012          MLS      r0,r1,r2,r0
000324  9002              STR      r0,[sp,#8]
;;;322    	uint8_t c9=(decnum/100000000)%10;
000326  489a              LDR      r0,|L1.1424|
000328  fbb4f0f0          UDIV     r0,r4,r0
00032c  fbb0f2f1          UDIV     r2,r0,r1
000330  fb010012          MLS      r0,r1,r2,r0
000334  9001              STR      r0,[sp,#4]
;;;323    	uint8_t c10=(decnum/100000000)%10;
000336  4896              LDR      r0,|L1.1424|
000338  fbb4f0f0          UDIV     r0,r4,r0
00033c  fbb0f2f1          UDIV     r2,r0,r1
000340  fb010012          MLS      r0,r1,r2,r0
000344  9000              STR      r0,[sp,#0]
;;;324    	UARTPutChar(UARTx, '0'+c10);
000346  9800              LDR      r0,[sp,#0]
000348  3030              ADDS     r0,r0,#0x30
00034a  b2c1              UXTB     r1,r0
00034c  9803              LDR      r0,[sp,#0xc]
00034e  f7fffffe          BL       UARTPutChar
;;;325    	UARTPutChar(UARTx, '0'+c9);
000352  9801              LDR      r0,[sp,#4]
000354  3030              ADDS     r0,r0,#0x30
000356  b2c1              UXTB     r1,r0
000358  9803              LDR      r0,[sp,#0xc]
00035a  f7fffffe          BL       UARTPutChar
;;;326    	UARTPutChar(UARTx, '0'+c8);
00035e  9802              LDR      r0,[sp,#8]
000360  3030              ADDS     r0,r0,#0x30
000362  b2c1              UXTB     r1,r0
000364  9803              LDR      r0,[sp,#0xc]
000366  f7fffffe          BL       UARTPutChar
;;;327    	UARTPutChar(UARTx, '0'+c7);
00036a  f10b0030          ADD      r0,r11,#0x30
00036e  b2c1              UXTB     r1,r0
000370  9803              LDR      r0,[sp,#0xc]
000372  f7fffffe          BL       UARTPutChar
;;;328    	UARTPutChar(UARTx, '0'+c6);
000376  f10a0030          ADD      r0,r10,#0x30
00037a  b2c1              UXTB     r1,r0
00037c  9803              LDR      r0,[sp,#0xc]
00037e  f7fffffe          BL       UARTPutChar
;;;329    	UARTPutChar(UARTx, '0'+c5);
000382  f1090030          ADD      r0,r9,#0x30
000386  b2c1              UXTB     r1,r0
000388  9803              LDR      r0,[sp,#0xc]
00038a  f7fffffe          BL       UARTPutChar
;;;330    	UARTPutChar(UARTx, '0'+c4);
00038e  f1080030          ADD      r0,r8,#0x30
000392  b2c1              UXTB     r1,r0
000394  9803              LDR      r0,[sp,#0xc]
000396  f7fffffe          BL       UARTPutChar
;;;331    	UARTPutChar(UARTx, '0'+c3);
00039a  f1070030          ADD      r0,r7,#0x30
00039e  b2c1              UXTB     r1,r0
0003a0  9803              LDR      r0,[sp,#0xc]
0003a2  f7fffffe          BL       UARTPutChar
;;;332    	UARTPutChar(UARTx, '0'+c2);
0003a6  f1060030          ADD      r0,r6,#0x30
0003aa  b2c1              UXTB     r1,r0
0003ac  9803              LDR      r0,[sp,#0xc]
0003ae  f7fffffe          BL       UARTPutChar
;;;333    	UARTPutChar(UARTx, '0'+c1);
0003b2  f1050030          ADD      r0,r5,#0x30
0003b6  b2c1              UXTB     r1,r0
0003b8  9803              LDR      r0,[sp,#0xc]
0003ba  f7fffffe          BL       UARTPutChar
;;;334    }
0003be  b005              ADD      sp,sp,#0x14
0003c0  e8bd8ff0          POP      {r4-r11,pc}
;;;335    
                          ENDP

                  UARTPutHex_ PROC
;;;341     **********************************************************************/
;;;342    void UARTPutHex_ (LPC_UART_TypeDef *UARTx, uint8_t hexnum)
0003c4  e92d41f0          PUSH     {r4-r8,lr}
;;;343    {
0003c8  4607              MOV      r7,r0
0003ca  460d              MOV      r5,r1
;;;344    	uint8_t nibble, i;
;;;345    
;;;346    	i = 1;
0003cc  2601              MOVS     r6,#1
;;;347    	do
0003ce  bf00              NOP      
                  |L1.976|
;;;348    	{
;;;349    		nibble = (hexnum >> (4*i)) & 0x0F;
0003d0  00b0              LSLS     r0,r6,#2
0003d2  fa45f000          ASR      r0,r5,r0
0003d6  f000040f          AND      r4,r0,#0xf
;;;350    
;;;351    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
0003da  2c09              CMP      r4,#9
0003dc  dd02              BLE      |L1.996|
0003de  f1040037          ADD      r0,r4,#0x37
0003e2  e001              B        |L1.1000|
                  |L1.996|
0003e4  f1040030          ADD      r0,r4,#0x30
                  |L1.1000|
0003e8  b2c1              UXTB     r1,r0
0003ea  4638              MOV      r0,r7
0003ec  f7fffffe          BL       UARTPutChar
;;;352    	}
;;;353    	while (i--);
0003f0  0030              MOVS     r0,r6
0003f2  f1a60101          SUB      r1,r6,#1
0003f6  b2ce              UXTB     r6,r1
0003f8  d1ea              BNE      |L1.976|
;;;354    }
0003fa  e8bd81f0          POP      {r4-r8,pc}
;;;355    
                          ENDP

                  UARTPutHex PROC
;;;362     **********************************************************************/
;;;363    void UARTPutHex (LPC_UART_TypeDef *UARTx, uint8_t hexnum)
0003fe  e92d41f0          PUSH     {r4-r8,lr}
;;;364    {
000402  4607              MOV      r7,r0
000404  460d              MOV      r5,r1
;;;365    	uint8_t nibble, i;
;;;366    
;;;367    	UARTPuts(UARTx, "0x");
000406  a163              ADR      r1,|L1.1428|
000408  4638              MOV      r0,r7
00040a  f7fffffe          BL       UARTPuts
;;;368    
;;;369    	i = 1;
00040e  2601              MOVS     r6,#1
;;;370    	do {
000410  bf00              NOP      
                  |L1.1042|
;;;371    		nibble = (hexnum >> (4*i)) & 0x0F;
000412  00b0              LSLS     r0,r6,#2
000414  fa45f000          ASR      r0,r5,r0
000418  f000040f          AND      r4,r0,#0xf
;;;372    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
00041c  2c09              CMP      r4,#9
00041e  dd02              BLE      |L1.1062|
000420  f1040037          ADD      r0,r4,#0x37
000424  e001              B        |L1.1066|
                  |L1.1062|
000426  f1040030          ADD      r0,r4,#0x30
                  |L1.1066|
00042a  b2c1              UXTB     r1,r0
00042c  4638              MOV      r0,r7
00042e  f7fffffe          BL       UARTPutChar
;;;373    	} while (i--);
000432  0030              MOVS     r0,r6
000434  f1a60101          SUB      r1,r6,#1
000438  b2ce              UXTB     r6,r1
00043a  d1ea              BNE      |L1.1042|
;;;374    }
00043c  e8bd81f0          POP      {r4-r8,pc}
;;;375    
                          ENDP

                  UARTPutHex16_ PROC
;;;382     **********************************************************************/
;;;383    void UARTPutHex16_ (LPC_UART_TypeDef *UARTx, uint16_t hexnum)
000440  e92d41f0          PUSH     {r4-r8,lr}
;;;384    {
000444  4607              MOV      r7,r0
000446  460d              MOV      r5,r1
;;;385    	uint8_t nibble, i;
;;;386    
;;;387    	i = 3;
000448  2603              MOVS     r6,#3
;;;388    	do
00044a  bf00              NOP      
                  |L1.1100|
;;;389    	{
;;;390    		nibble = (hexnum >> (4*i)) & 0x0F;
00044c  00b0              LSLS     r0,r6,#2
00044e  fa45f000          ASR      r0,r5,r0
000452  f000040f          AND      r4,r0,#0xf
;;;391    
;;;392    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
000456  2c09              CMP      r4,#9
000458  dd02              BLE      |L1.1120|
00045a  f1040037          ADD      r0,r4,#0x37
00045e  e001              B        |L1.1124|
                  |L1.1120|
000460  f1040030          ADD      r0,r4,#0x30
                  |L1.1124|
000464  b2c1              UXTB     r1,r0
000466  4638              MOV      r0,r7
000468  f7fffffe          BL       UARTPutChar
;;;393    	}
;;;394    	while (i--);
00046c  0030              MOVS     r0,r6
00046e  f1a60101          SUB      r1,r6,#1
000472  b2ce              UXTB     r6,r1
000474  d1ea              BNE      |L1.1100|
;;;395    }
000476  e8bd81f0          POP      {r4-r8,pc}
;;;396    
                          ENDP

                  UARTPutHex16 PROC
;;;403     **********************************************************************/
;;;404    void UARTPutHex16 (LPC_UART_TypeDef *UARTx, uint16_t hexnum)
00047a  e92d41f0          PUSH     {r4-r8,lr}
;;;405    {
00047e  4607              MOV      r7,r0
000480  460d              MOV      r5,r1
;;;406    	uint8_t nibble, i;
;;;407    
;;;408    	UARTPuts(UARTx, "0x");
000482  a144              ADR      r1,|L1.1428|
000484  4638              MOV      r0,r7
000486  f7fffffe          BL       UARTPuts
;;;409    
;;;410    	i = 3;
00048a  2603              MOVS     r6,#3
;;;411    	do
00048c  bf00              NOP      
                  |L1.1166|
;;;412    	{
;;;413    		nibble = (hexnum >> (4*i)) & 0x0F;
00048e  00b0              LSLS     r0,r6,#2
000490  fa45f000          ASR      r0,r5,r0
000494  f000040f          AND      r4,r0,#0xf
;;;414    
;;;415    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
000498  2c09              CMP      r4,#9
00049a  dd02              BLE      |L1.1186|
00049c  f1040037          ADD      r0,r4,#0x37
0004a0  e001              B        |L1.1190|
                  |L1.1186|
0004a2  f1040030          ADD      r0,r4,#0x30
                  |L1.1190|
0004a6  b2c1              UXTB     r1,r0
0004a8  4638              MOV      r0,r7
0004aa  f7fffffe          BL       UARTPutChar
;;;416    	}
;;;417    	while (i--);
0004ae  0030              MOVS     r0,r6
0004b0  f1a60101          SUB      r1,r6,#1
0004b4  b2ce              UXTB     r6,r1
0004b6  d1ea              BNE      |L1.1166|
;;;418    }
0004b8  e8bd81f0          POP      {r4-r8,pc}
;;;419    
                          ENDP

                  UARTPutHex32_ PROC
;;;425     **********************************************************************/
;;;426    void UARTPutHex32_ (LPC_UART_TypeDef *UARTx, uint32_t hexnum)
0004bc  e92d41f0          PUSH     {r4-r8,lr}
;;;427    {
0004c0  4607              MOV      r7,r0
0004c2  460d              MOV      r5,r1
;;;428    	uint8_t nibble, i;
;;;429    
;;;430    	i = 7;
0004c4  2607              MOVS     r6,#7
;;;431    	do
0004c6  bf00              NOP      
                  |L1.1224|
;;;432    	{
;;;433    		nibble = (hexnum >> (4*i)) & 0x0F;
0004c8  00b0              LSLS     r0,r6,#2
0004ca  fa25f000          LSR      r0,r5,r0
0004ce  f000040f          AND      r4,r0,#0xf
;;;434    
;;;435    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
0004d2  2c09              CMP      r4,#9
0004d4  dd02              BLE      |L1.1244|
0004d6  f1040037          ADD      r0,r4,#0x37
0004da  e001              B        |L1.1248|
                  |L1.1244|
0004dc  f1040030          ADD      r0,r4,#0x30
                  |L1.1248|
0004e0  b2c1              UXTB     r1,r0
0004e2  4638              MOV      r0,r7
0004e4  f7fffffe          BL       UARTPutChar
;;;436    	}
;;;437    	while (i--);
0004e8  0030              MOVS     r0,r6
0004ea  f1a60101          SUB      r1,r6,#1
0004ee  b2ce              UXTB     r6,r1
0004f0  d1ea              BNE      |L1.1224|
;;;438    }
0004f2  e8bd81f0          POP      {r4-r8,pc}
;;;439    
                          ENDP

                  UARTPutHex32 PROC
;;;446     **********************************************************************/
;;;447    void UARTPutHex32 (LPC_UART_TypeDef *UARTx, uint32_t hexnum)
0004f6  e92d41f0          PUSH     {r4-r8,lr}
;;;448    {
0004fa  4607              MOV      r7,r0
0004fc  460d              MOV      r5,r1
;;;449    	uint8_t nibble, i;
;;;450    
;;;451    	UARTPuts(UARTx, "0x");
0004fe  a125              ADR      r1,|L1.1428|
000500  4638              MOV      r0,r7
000502  f7fffffe          BL       UARTPuts
;;;452    
;;;453    	i = 7;
000506  2607              MOVS     r6,#7
;;;454    	do
000508  bf00              NOP      
                  |L1.1290|
;;;455    	{
;;;456    		nibble = (hexnum >> (4*i)) & 0x0F;
00050a  00b0              LSLS     r0,r6,#2
00050c  fa25f000          LSR      r0,r5,r0
000510  f000040f          AND      r4,r0,#0xf
;;;457    
;;;458    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
000514  2c09              CMP      r4,#9
000516  dd3f              BLE      |L1.1432|
000518  f1040037          ADD      r0,r4,#0x37
00051c  e03e              B        |L1.1436|
00051e  0000              DCW      0x0000
                  |L1.1312|
000520  506c6561          DCB      "Please enter a char from '0' to '9'!!!\r\n",0
000524  73652065
000528  6e746572
00052c  20612063
000530  68617220
000534  66726f6d
000538  20273027
00053c  20746f20
000540  27392721
000544  21210d0a
000548  00      
000549  00                DCB      0
00054a  00                DCB      0
00054b  00                DCB      0
                  |L1.1356|
                          DCD      ||.conststring||
                  |L1.1360|
000550  52656163          DCB      "Reach limitation of re-tries. Return FAILED\r\n",0
000554  68206c69
000558  6d697461
00055c  74696f6e
000560  206f6620
000564  72652d74
000568  72696573
00056c  2e205265
000570  7475726e
000574  20464149
000578  4c45440d
00057c  0a00    
00057e  00                DCB      0
00057f  00                DCB      0
                  |L1.1408|
000580  0a0d00            DCB      "\n\r",0
000583  00                DCB      0
                  |L1.1412|
                          DCD      0x000186a0
                  |L1.1416|
                          DCD      0x000f4240
                  |L1.1420|
                          DCD      0x00989680
                  |L1.1424|
                          DCD      0x05f5e100
                  |L1.1428|
000594  307800            DCB      "0x",0
000597  00                DCB      0
                  |L1.1432|
000598  f1040030          ADD      r0,r4,#0x30
                  |L1.1436|
00059c  b2c1              UXTB     r1,r0
00059e  4638              MOV      r0,r7
0005a0  f7fffffe          BL       UARTPutChar
;;;459    	}
;;;460    	while (i--);
0005a4  0030              MOVS     r0,r6
0005a6  f1a60101          SUB      r1,r6,#1
0005aa  b2ce              UXTB     r6,r1
0005ac  d1ad              BNE      |L1.1290|
;;;461    }
0005ae  e8bd81f0          POP      {r4-r8,pc}
;;;462    
                          ENDP

                  debug_frmwrk_init PROC
;;;485     **********************************************************************/
;;;486    void debug_frmwrk_init(void)
0005b2  b51c              PUSH     {r2-r4,lr}
;;;487    {
;;;488    	UART_CFG_Type UARTConfigStruct;
;;;489    
;;;490    #if (USED_UART_DEBUG_PORT == 0)
;;;491    	/*
;;;492    	 * Initialize UART0 pin connect
;;;493    	 * P0.2: U0_TXD
;;;494    	 * P0.3: U0_RXD
;;;495    	 */
;;;496    	PINSEL_ConfigPin (0, 2, 1);
0005b4  2201              MOVS     r2,#1
0005b6  2102              MOVS     r1,#2
0005b8  2000              MOVS     r0,#0
0005ba  f7fffffe          BL       PINSEL_ConfigPin
;;;497    	PINSEL_ConfigPin (0, 3, 1);
0005be  2201              MOVS     r2,#1
0005c0  2103              MOVS     r1,#3
0005c2  2000              MOVS     r0,#0
0005c4  f7fffffe          BL       PINSEL_ConfigPin
;;;498    #elif (USED_UART_DEBUG_PORT == 1)
;;;499    	/*
;;;500    	 * Initialize UART1 pin connect
;;;501    	 * P3.16: U1_TXD
;;;502    	 * P3.17: U1_RXD
;;;503    	 */
;;;504    	PINSEL_ConfigPin(3,16,3);
;;;505    	PINSEL_ConfigPin(3,17,3);
;;;506    #elif (USED_UART_DEBUG_PORT == 2)
;;;507    	/*
;;;508    	 * Initialize UART2 pin connect
;;;509    	 * P0.10: U2_TXD
;;;510    	 * P0.11: U2_RXD
;;;511    	 */
;;;512    	PINSEL_ConfigPin(0,10,1);
;;;513    	PINSEL_ConfigPin(0,11,1);
;;;514    
;;;515    #endif
;;;516    
;;;517    	/* Initialize UART Configuration parameter structure to default state:
;;;518    	 * Baudrate = 115200bps
;;;519    	 * 8 data bit
;;;520    	 * 1 Stop bit
;;;521    	 * None parity
;;;522    	 */
;;;523    	UART_ConfigStructInit(&UARTConfigStruct);
0005c8  4668              MOV      r0,sp
0005ca  f7fffffe          BL       UART_ConfigStructInit
;;;524    	// Re-configure baudrate to 115200bps
;;;525    	UARTConfigStruct.Baud_rate = 115200;
0005ce  f44f30e1          MOV      r0,#0x1c200
0005d2  9000              STR      r0,[sp,#0]
;;;526    
;;;527    	// Initialize DEBUG_UART_PORT peripheral with given to corresponding parameter
;;;528    	UART_Init(DEBUG_UART_PORT, &UARTConfigStruct);
0005d4  4669              MOV      r1,sp
0005d6  4822              LDR      r0,|L1.1632|
0005d8  f7fffffe          BL       UART_Init
;;;529    
;;;530    	// Enable UART Transmit
;;;531    	UART_TxCmd(DEBUG_UART_PORT, ENABLE);
0005dc  2101              MOVS     r1,#1
0005de  4820              LDR      r0,|L1.1632|
0005e0  f7fffffe          BL       UART_TxCmd
;;;532    
;;;533    	_db_msg	= UARTPuts;
0005e4  f2af50a1          ADR      r0,UARTPuts + 1
0005e8  491e              LDR      r1,|L1.1636|
0005ea  6008              STR      r0,[r1,#0]  ; _db_msg
;;;534    	_db_msg_ = UARTPuts_;
0005ec  f2af4031          ADR      r0,UARTPuts_ + 1
0005f0  491d              LDR      r1,|L1.1640|
0005f2  6008              STR      r0,[r1,#0]  ; _db_msg_
;;;535    	_db_char = UARTPutChar;
0005f4  f2af50f7          ADR      r0,UARTPutChar + 1
0005f8  491c              LDR      r1,|L1.1644|
0005fa  6008              STR      r0,[r1,#0]  ; _db_char
;;;536    	_db_hex = UARTPutHex;
0005fc  f2af2001          ADR      r0,UARTPutHex + 1
000600  491b              LDR      r1,|L1.1648|
000602  6008              STR      r0,[r1,#0]  ; _db_hex
;;;537    	_db_hex_16 = UARTPutHex16;
000604  f2af108d          ADR      r0,UARTPutHex16 + 1
000608  491a              LDR      r1,|L1.1652|
00060a  6008              STR      r0,[r1,#0]  ; _db_hex_16
;;;538    	_db_hex_32 = UARTPutHex32;
00060c  f2af1019          ADR      r0,UARTPutHex32 + 1
000610  4919              LDR      r1,|L1.1656|
000612  6008              STR      r0,[r1,#0]  ; _db_hex_32
;;;539    	_db_hex_ = UARTPutHex_;
000614  f2af2053          ADR      r0,UARTPutHex_ + 1
000618  4918              LDR      r1,|L1.1660|
00061a  6008              STR      r0,[r1,#0]  ; _db_hex_
;;;540    	_db_hex_16_ = UARTPutHex16_;
00061c  f2af10df          ADR      r0,UARTPutHex16_ + 1
000620  4917              LDR      r1,|L1.1664|
000622  6008              STR      r0,[r1,#0]  ; _db_hex_16_
;;;541    	_db_hex_32_ = UARTPutHex32_;
000624  f2af106b          ADR      r0,UARTPutHex32_ + 1
000628  4916              LDR      r1,|L1.1668|
00062a  6008              STR      r0,[r1,#0]  ; _db_hex_32_
;;;542    	_db_dec = UARTPutDec;
00062c  f2af4059          ADR      r0,UARTPutDec + 1
000630  4915              LDR      r1,|L1.1672|
000632  6008              STR      r0,[r1,#0]  ; _db_dec
;;;543    	_db_dec_16 = UARTPutDec16;
000634  f2af401f          ADR      r0,UARTPutDec16 + 1
000638  4914              LDR      r1,|L1.1676|
00063a  6008              STR      r0,[r1,#0]  ; _db_dec_16
;;;544    	_db_dec_32 = UARTPutDec32;
00063c  f2af3093          ADR      r0,UARTPutDec32 + 1
000640  4913              LDR      r1,|L1.1680|
000642  6008              STR      r0,[r1,#0]  ; _db_dec_32
;;;545    	_db_get_key = UARTGetKey;
000644  f2af6035          ADR      r0,UARTGetKey + 1
000648  4912              LDR      r1,|L1.1684|
00064a  6008              STR      r0,[r1,#0]  ; _db_get_key
;;;546    	_db_get_char = UARTGetChar;
00064c  f2af6023          ADR      r0,UARTGetChar + 1
000650  4911              LDR      r1,|L1.1688|
000652  6008              STR      r0,[r1,#0]  ; _db_get_char
;;;547    	_db_get_val = UARTGetValue;
000654  f2af50f5          ADR      r0,UARTGetValue + 1
000658  4910              LDR      r1,|L1.1692|
00065a  6008              STR      r0,[r1,#0]  ; _db_get_val
;;;548    }
00065c  bd1c              POP      {r2-r4,pc}
;;;549    
                          ENDP

00065e  0000              DCW      0x0000
                  |L1.1632|
                          DCD      0x4000c000
                  |L1.1636|
                          DCD      _db_msg
                  |L1.1640|
                          DCD      _db_msg_
                  |L1.1644|
                          DCD      _db_char
                  |L1.1648|
                          DCD      _db_hex
                  |L1.1652|
                          DCD      _db_hex_16
                  |L1.1656|
                          DCD      _db_hex_32
                  |L1.1660|
                          DCD      _db_hex_
                  |L1.1664|
                          DCD      _db_hex_16_
                  |L1.1668|
                          DCD      _db_hex_32_
                  |L1.1672|
                          DCD      _db_dec
                  |L1.1676|
                          DCD      _db_dec_16
                  |L1.1680|
                          DCD      _db_dec_32
                  |L1.1684|
                          DCD      _db_get_key
                  |L1.1688|
                          DCD      _db_get_char
                  |L1.1692|
                          DCD      _db_get_val

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  506c6561          DCB      "Please enter a char from '0' to '9', and 'a/A', 'b/B', "
000004  73652065
000008  6e746572
00000c  20612063
000010  68617220
000014  66726f6d
000018  20273027
00001c  20746f20
000020  2739272c
000024  20616e64
000028  2027612f
00002c  41272c20
000030  27622f42
000034  272c20  
000037  632f4327          DCB      "c/C', 'd/D', 'e/E' and 'f/F'!!!\r\n",0
00003b  2c202764
00003f  2f44272c
000043  2027652f
000047  45272061
00004b  6e642027
00004f  662f4627
000053  2121210d
000057  0a00    

                          AREA ||.data||, DATA, ALIGN=2

                  _db_msg
                          DCD      0x00000000
                  _db_msg_
                          DCD      0x00000000
                  _db_char
                          DCD      0x00000000
                  _db_dec
                          DCD      0x00000000
                  _db_dec_16
                          DCD      0x00000000
                  _db_dec_32
                          DCD      0x00000000
                  _db_hex
                          DCD      0x00000000
                  _db_hex_16
                          DCD      0x00000000
                  _db_hex_32
                          DCD      0x00000000
                  _db_hex_
                          DCD      0x00000000
                  _db_hex_16_
                          DCD      0x00000000
                  _db_hex_32_
                          DCD      0x00000000
                  _db_get_key
                          DCD      0x00000000
                  _db_get_char
                          DCD      0x00000000
                  _db_get_val
                          DCD      0x00000000

; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\flash2k.o --asm_dir=.\ --list_dir=.\ --depend=.\flash\flash2k.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\CM3_lib -I..\Drivers -I..\Startup -I.\Easy_web -I.\Lcd_Drv -I.\IIC_Test -I.\USU_Host -I.\Nand_Test -I.\FATFS_R0.08 -I..\fs -I"D:\Program Files\mdk\ARM\RV31\INC" -I"D:\Program Files\mdk\pack\ARM\CMSIS\4.1.1\CMSIS\Include" -I"D:\Program Files\mdk\ARM\Inc\NXP\LPC177x_8x" -D__MICROLIB --omf_browse=.\flash\flash2k.crf ..\fs\flash2K.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  yflash2_EraseBlockInNAND PROC
;;;8      // blockNumber 0~xxxx
;;;9      int yflash2_EraseBlockInNAND(yaffs_Device *dev, int blockNumber)
000000  b570              PUSH     {r4-r6,lr}
;;;10     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;11     	if((blockNumber < dev->startBlock)
000006  69a8              LDR      r0,[r5,#0x18]
000008  42a0              CMP      r0,r4
00000a  dc02              BGT      |L1.18|
;;;12          ||(blockNumber > dev->endBlock))
00000c  69e8              LDR      r0,[r5,#0x1c]
00000e  42a0              CMP      r0,r4
000010  da01              BGE      |L1.22|
                  |L1.18|
;;;13     	{	 
;;;14     		return  YAFFS_FAIL;
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;15     	}
;;;16     	//对应的是块号
;;;17     	if(Nand_EraseBlockLarge(blockNumber))
;;;18     	{// 返回非0值
;;;19     		return YAFFS_OK;
;;;20         }
;;;21     
;;;22     	return  YAFFS_FAIL;
;;;23     }
000014  bd70              POP      {r4-r6,pc}
                  |L1.22|
000016  4620              MOV      r0,r4                 ;17
000018  f7fffffe          BL       Nand_EraseBlockLarge
00001c  b108              CBZ      r0,|L1.34|
00001e  2001              MOVS     r0,#1                 ;19
000020  e7f8              B        |L1.20|
                  |L1.34|
000022  2000              MOVS     r0,#0                 ;22
000024  e7f6              B        |L1.20|
;;;24     // chunkInNAND = page  0~xxxx
                          ENDP

                  yflash2_WriteChunkWithTagsToNAND PROC
;;;25     int yflash2_WriteChunkWithTagsToNAND(yaffs_Device *dev,int chunkInNAND,const __u8 *data, const yaffs_ExtendedTags *tags)
000026  e92d43f0          PUSH     {r4-r9,lr}
;;;26     {
00002a  b091              SUB      sp,sp,#0x44
00002c  4681              MOV      r9,r0
00002e  460c              MOV      r4,r1
000030  4615              MOV      r5,r2
000032  461e              MOV      r6,r3
;;;27         yaffs_PackedTags2  *pkt;
;;;28         __u8  tmp[64]={'\0'};
000034  2140              MOVS     r1,#0x40
000036  a801              ADD      r0,sp,#4
000038  f7fffffe          BL       __aeabi_memclr4
;;;29         int i;
;;;30     
;;;31         //put_str_("yaffs write9");
;;;32         //_DBH32_(chunkInNAND);
;;;33     	pkt=(yaffs_PackedTags2*)tmp;
00003c  af01              ADD      r7,sp,#4
;;;34     	yaffs_PackTags2(pkt,tags);
00003e  4631              MOV      r1,r6
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       yaffs_PackTags2
;;;35         
;;;36         i = Nand_WritePageWithSpare2048(chunkInNAND,data,tmp);// 返回1时表示写成功
000046  aa01              ADD      r2,sp,#4
000048  4629              MOV      r1,r5
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       Nand_WritePageWithSpare2048
000050  4680              MOV      r8,r0
;;;37         
;;;38     	if(i)
000052  f1b80f00          CMP      r8,#0
000056  d003              BEQ      |L1.96|
;;;39     	{
;;;40     		return  YAFFS_OK;
000058  2001              MOVS     r0,#1
                  |L1.90|
;;;41     	}	
;;;42      
;;;43     	return YAFFS_FAIL;
;;;44     }
00005a  b011              ADD      sp,sp,#0x44
00005c  e8bd83f0          POP      {r4-r9,pc}
                  |L1.96|
000060  2000              MOVS     r0,#0                 ;43
000062  e7fa              B        |L1.90|
;;;45     // chunkInNAND = page  0~xxxx
                          ENDP

                  yflash2_ReadChunkWithTagsFromNAND PROC
;;;46     int yflash2_ReadChunkWithTagsFromNAND(yaffs_Device *dev,int chunkInNAND, __u8 *data, yaffs_ExtendedTags *tags)
000064  e92d43f0          PUSH     {r4-r9,lr}
;;;47     {
000068  b091              SUB      sp,sp,#0x44
00006a  4681              MOV      r9,r0
00006c  460c              MOV      r4,r1
00006e  4615              MOV      r5,r2
000070  461e              MOV      r6,r3
;;;48         yaffs_PackedTags2   *upt;
;;;49         __u8  tmp[64]={'\0'};
000072  2140              MOVS     r1,#0x40
000074  a801              ADD      r0,sp,#4
000076  f7fffffe          BL       __aeabi_memclr4
;;;50         int i;
;;;51         
;;;52         i = Nand_ReadPageWithSpare2048(chunkInNAND,data,tmp);// 返回1时表示读成功
00007a  aa01              ADD      r2,sp,#4
00007c  4629              MOV      r1,r5
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       Nand_ReadPageWithSpare2048
000084  4680              MOV      r8,r0
;;;53     
;;;54         upt = (yaffs_PackedTags2*)tmp;
000086  af01              ADD      r7,sp,#4
;;;55     
;;;56         if(i)
000088  f1b80f00          CMP      r8,#0
00008c  d007              BEQ      |L1.158|
;;;57     	{
;;;58     		yaffs_UnpackTags2(tags,upt);
00008e  4639              MOV      r1,r7
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       yaffs_UnpackTags2
;;;59             
;;;60     		return  YAFFS_OK;
000096  2001              MOVS     r0,#1
                  |L1.152|
;;;61     	}
;;;62     	
;;;63     	return YAFFS_FAIL;
;;;64     }
000098  b011              ADD      sp,sp,#0x44
00009a  e8bd83f0          POP      {r4-r9,pc}
                  |L1.158|
00009e  2000              MOVS     r0,#0                 ;63
0000a0  e7fa              B        |L1.152|
;;;65     int yflash2_GetNumberOfBlocks()
                          ENDP

                  yflash2_GetNumberOfBlocks PROC
0000a2  f44f6080          MOV      r0,#0x400
;;;66     {
;;;67         return 1024;
;;;68     }
0000a6  4770              BX       lr
;;;69     int yflash2_InitialiseNAND(yaffs_Device *dev)
                          ENDP

                  yflash2_InitialiseNAND PROC
0000a8  4601              MOV      r1,r0
;;;70     {
;;;71     
;;;72     	return YAFFS_OK;
0000aa  2001              MOVS     r0,#1
;;;73     }
0000ac  4770              BX       lr
;;;74     int yflash2_MarkNANDBlockBad(struct yaffs_DeviceStruct *dev, int blockNo)
                          ENDP

                  yflash2_MarkNANDBlockBad PROC
0000ae  4602              MOV      r2,r0
;;;75     {
;;;76     
;;;77     	return YAFFS_OK;
0000b0  2001              MOVS     r0,#1
;;;78     }
0000b2  4770              BX       lr
;;;79     //这个函数没有改变  与原来的代码相同
                          ENDP

                  yflash2_QueryNANDBlock PROC
;;;80     int yflash2_QueryNANDBlock(struct yaffs_DeviceStruct *dev, int blockNo, yaffs_BlockState *state, __u32 *sequenceNumber)
0000b4  e92d41f0          PUSH     {r4-r8,lr}
;;;81     {
0000b8  b092              SUB      sp,sp,#0x48
0000ba  4606              MOV      r6,r0
0000bc  460f              MOV      r7,r1
0000be  4614              MOV      r4,r2
0000c0  461d              MOV      r5,r3
;;;82     	yaffs_ExtendedTags tags;
;;;83     	int chunkNo;
;;;84         
;;;85     	*sequenceNumber = 0;
0000c2  2000              MOVS     r0,#0
0000c4  6028              STR      r0,[r5,#0]
;;;86     	
;;;87     	chunkNo = blockNo * (dev->nChunksPerBlock);
0000c6  6930              LDR      r0,[r6,#0x10]
0000c8  fb00f807          MUL      r8,r0,r7
;;;88      
;;;89     	yflash2_ReadChunkWithTagsFromNAND(dev,chunkNo,NULL,&tags);
0000cc  466b              MOV      r3,sp
0000ce  2200              MOVS     r2,#0
0000d0  4641              MOV      r1,r8
0000d2  4630              MOV      r0,r6
0000d4  f7fffffe          BL       yflash2_ReadChunkWithTagsFromNAND
;;;90     	if(tags.blockBad)
0000d8  9806              LDR      r0,[sp,#0x18]
0000da  b110              CBZ      r0,|L1.226|
;;;91     	{
;;;92     		*state = YAFFS_BLOCK_STATE_DEAD;
0000dc  2009              MOVS     r0,#9
0000de  7020              STRB     r0,[r4,#0]
0000e0  e00a              B        |L1.248|
                  |L1.226|
;;;93     	}
;;;94     	else if(!tags.chunkUsed)
0000e2  9801              LDR      r0,[sp,#4]
0000e4  b910              CBNZ     r0,|L1.236|
;;;95     	{
;;;96     		*state = YAFFS_BLOCK_STATE_EMPTY;
0000e6  2003              MOVS     r0,#3
0000e8  7020              STRB     r0,[r4,#0]
0000ea  e005              B        |L1.248|
                  |L1.236|
;;;97     	}
;;;98     	else if(tags.chunkUsed)
0000ec  9801              LDR      r0,[sp,#4]
0000ee  b118              CBZ      r0,|L1.248|
;;;99     	{
;;;100    		*state = YAFFS_BLOCK_STATE_NEEDS_SCANNING;
0000f0  2002              MOVS     r0,#2
0000f2  7020              STRB     r0,[r4,#0]
;;;101    		*sequenceNumber = tags.sequenceNumber;
0000f4  9809              LDR      r0,[sp,#0x24]
0000f6  6028              STR      r0,[r5,#0]
                  |L1.248|
;;;102    	}
;;;103    	return YAFFS_OK;	
0000f8  2001              MOVS     r0,#1
;;;104    }
0000fa  b012              ADD      sp,sp,#0x48
0000fc  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


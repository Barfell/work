; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\nandflash_k9f2g08u0x.o --asm_dir=.\ --list_dir=.\ --depend=.\flash\nandflash_k9f2g08u0x.d --feedback=.\Flash\YL_LPC1788_Test.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\CM3_lib -I..\Drivers -I..\Startup -I.\Easy_web -I.\Lcd_Drv -I.\IIC_Test -I.\USU_Host -I.\Nand_Test -I.\FATFS_R0.08 -I..\fs -I"D:\Program Files\mdk\ARM\RV31\INC" -I"D:\Program Files\mdk\pack\ARM\CMSIS\4.1.1\CMSIS\Include" -I"D:\Program Files\mdk\ARM\Inc\NXP\LPC177x_8x" -D__MICROLIB --omf_browse=.\flash\nandflash_k9f2g08u0x.crf ..\Drivers\nandflash_k9f2g08u0x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NandFlash_Init PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000002  f7fffffe          BL       EMC_Init
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  2001              MOVS     r0,#1
000008  4979              LDR      r1,|L1.496|
00000a  6008              STR      r0,[r1,#0]
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  2100              MOVS     r1,#0
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       EMC_StaMemConfigMW
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000014  2180              MOVS     r1,#0x80
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       EMC_StaMemConfigPB
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
00001c  2202              MOVS     r2,#2
00001e  2100              MOVS     r1,#0
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       EMC_SetStaMemoryParameter
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
000026  2202              MOVS     r2,#2
000028  2101              MOVS     r1,#1
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       EMC_SetStaMemoryParameter
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
000030  221f              MOVS     r2,#0x1f
000032  2104              MOVS     r1,#4
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       EMC_SetStaMemoryParameter
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
00003a  221f              MOVS     r2,#0x1f
00003c  2103              MOVS     r1,#3
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       EMC_SetStaMemoryParameter
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
000044  221f              MOVS     r2,#0x1f
000046  2104              MOVS     r1,#4
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       EMC_SetStaMemoryParameter
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
00004e  220f              MOVS     r2,#0xf
000050  2105              MOVS     r1,#5
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       EMC_SetStaMemoryParameter
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
000058  2001              MOVS     r0,#1
00005a  f88d0000          STRB     r0,[sp,#0]
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
00005e  9001              STR      r0,[sp,#4]
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
000060  466a              MOV      r2,sp
000062  2100              MOVS     r1,#0
000064  f04f2040          MOV      r0,#0x40004000
000068  f7fffffe          BL       TIM_Init
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
00006c  2002              MOVS     r0,#2
00006e  f7fffffe          BL       TIM_Waitms
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
000072  2400              MOVS     r4,#0
000074  e003              B        |L1.126|
                  |L1.118|
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
000076  2000              MOVS     r0,#0
000078  495e              LDR      r1,|L1.500|
00007a  5508              STRB     r0,[r1,r4]
00007c  1c64              ADDS     r4,r4,#1              ;75
                  |L1.126|
00007e  f5b46f00          CMP      r4,#0x800             ;75
000082  d3f8              BCC      |L1.118|
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
000084  bd1c              POP      {r2-r4,pc}
;;;82     
                          ENDP

                  NandFlash_Reset PROC
;;;87      **********************************************************************/
;;;88     void NandFlash_Reset( void )
000086  b510              PUSH     {r4,lr}
;;;89     {
;;;90     	volatile uint8_t *pCLE;
;;;91     
;;;92     	/* Reset NAND FLASH  through NAND FLASH command */
;;;93     	pCLE = K9F1G_CLE;
000088  4c5b              LDR      r4,|L1.504|
;;;94     	*pCLE = K9FXX_RESET;
00008a  20ff              MOVS     r0,#0xff
00008c  7020              STRB     r0,[r4,#0]
;;;95     
;;;96     	TIM_Waitms(2);
00008e  2002              MOVS     r0,#2
000090  f7fffffe          BL       TIM_Waitms
;;;97     	return;
;;;98     }
000094  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  Nand_EraseBlockLarge PROC
;;;395    
;;;396    uint32_t  Nand_EraseBlockLarge(int BlockAddr)
000096  e92d41f0          PUSH     {r4-r8,lr}
;;;397    {
00009a  4606              MOV      r6,r0
;;;398        volatile uint8_t *pCLE;
;;;399    	volatile uint8_t *pALE;
;;;400    	uint32_t rowAddr;
;;;401    
;;;402    	pCLE  = K9F1G_CLE;
00009c  4f56              LDR      r7,|L1.504|
;;;403    	pALE  = K9F1G_ALE;
00009e  4c57              LDR      r4,|L1.508|
;;;404    
;;;405    	rowAddr = BlockAddr * NANDFLASH_PAGE_PER_BLOCK;
0000a0  01b5              LSLS     r5,r6,#6
;;;406    	
;;;407    	*pCLE = K9FXX_BLOCK_ERASE_1;
0000a2  2060              MOVS     r0,#0x60
0000a4  7038              STRB     r0,[r7,#0]
;;;408        
;;;409    	*pALE = (uint8_t)(rowAddr & 0x00FF);			/* column address low */
0000a6  7025              STRB     r5,[r4,#0]
;;;410        
;;;411    	*pALE = (uint8_t)((rowAddr & 0xFF00) >> 8);	/* column address high */
0000a8  0a28              LSRS     r0,r5,#8
0000aa  7020              STRB     r0,[r4,#0]
;;;412        
;;;413    	*pALE = (uint8_t)((rowAddr & 0xFF0000) >> 16);	/* column address high */
0000ac  0c28              LSRS     r0,r5,#16
0000ae  7020              STRB     r0,[r4,#0]
;;;414        
;;;415    	*pCLE = K9FXX_BLOCK_ERASE_2;
0000b0  20d0              MOVS     r0,#0xd0
0000b2  7038              STRB     r0,[r7,#0]
;;;416        // 这里的时间有可能需要减
;;;417    	Delay(10);//delay 10ms. K9F2G08 Block Erase Time max 10ms type 1.5ms
0000b4  200a              MOVS     r0,#0xa
0000b6  f7fffffe          BL       Delay
;;;418        
;;;419    	return 1;//(NandFlash_ReadStatus(K9FXX_BLOCK_ERASE_1));
0000ba  2001              MOVS     r0,#1
;;;420    }
0000bc  e8bd81f0          POP      {r4-r8,pc}
;;;421    
                          ENDP

                  Nand_WritePageWithSpare2048 PROC
;;;422    int  Nand_WritePageWithSpare2048(int PageNum,const uint8_t * DataBuf,const uint8_t *Spare)
0000c0  e92d43fe          PUSH     {r1-r9,lr}
;;;423    {
0000c4  4607              MOV      r7,r0
0000c6  460c              MOV      r4,r1
0000c8  4616              MOV      r6,r2
;;;424    	volatile uint8_t *pCLE;
;;;425    	volatile uint8_t *pALE;
;;;426    	volatile uint8_t *pDATA;
;;;427    	volatile uint32_t i, curAddr, curColumm,curRow;
;;;428    
;;;429    	pCLE  = K9F1G_CLE;
0000ca  f8df812c          LDR      r8,|L1.504|
;;;430    	pALE  = K9F1G_ALE;
0000ce  4d4b              LDR      r5,|L1.508|
;;;431    	pDATA = K9F1G_DATA;
0000d0  f04f4901          MOV      r9,#0x81000000
;;;432    
;;;433        if(DataBuf == NULL)
0000d4  b914              CBNZ     r4,|L1.220|
;;;434    	    curColumm = NANDFLASH_RW_PAGE_SIZE;
0000d6  0d28              LSRS     r0,r5,#20
0000d8  9001              STR      r0,[sp,#4]
0000da  e001              B        |L1.224|
                  |L1.220|
;;;435        else
;;;436            curColumm = 0;
0000dc  2000              MOVS     r0,#0
0000de  9001              STR      r0,[sp,#4]
                  |L1.224|
;;;437        
;;;438    	curRow = PageNum;
0000e0  9700              STR      r7,[sp,#0]
;;;439    
;;;440    	*pCLE = K9FXX_BLOCK_PROGRAM_1;
0000e2  2080              MOVS     r0,#0x80
0000e4  f8880000          STRB     r0,[r8,#0]
;;;441    
;;;442    	*pALE =  (uint8_t)(curColumm & 0x000000FF);		/* column address low */
0000e8  9801              LDR      r0,[sp,#4]
0000ea  7028              STRB     r0,[r5,#0]
;;;443    
;;;444    	*pALE = (uint8_t)((curColumm & 0x00000F00) >> 8);	/* column address high */
0000ec  9801              LDR      r0,[sp,#4]
0000ee  f3c02003          UBFX     r0,r0,#8,#4
0000f2  7028              STRB     r0,[r5,#0]
;;;445    
;;;446    	*pALE = (uint8_t)(curRow & 0x000000FF);		/* row address low */
0000f4  9800              LDR      r0,[sp,#0]
0000f6  7028              STRB     r0,[r5,#0]
;;;447    
;;;448    	*pALE = (uint8_t)((curRow & 0x0000FF00) >> 8);
0000f8  9800              LDR      r0,[sp,#0]
0000fa  0a00              LSRS     r0,r0,#8
0000fc  7028              STRB     r0,[r5,#0]
;;;449    
;;;450    	*pALE = (uint8_t)((curRow & 0x00010000) >> 16);	/* row address high */
0000fe  9800              LDR      r0,[sp,#0]
000100  f3c04000          UBFX     r0,r0,#16,#1
000104  7028              STRB     r0,[r5,#0]
;;;451    
;;;452        if(DataBuf != NULL)
000106  b16c              CBZ      r4,|L1.292|
;;;453        {
;;;454        	for ( i = 0; i < NANDFLASH_RW_PAGE_SIZE; i++ )
000108  2000              MOVS     r0,#0
00010a  9002              STR      r0,[sp,#8]
00010c  e006              B        |L1.284|
                  |L1.270|
;;;455        	{
;;;456        		*pDATA = *DataBuf++;
00010e  f8140b01          LDRB     r0,[r4],#1
000112  f8890000          STRB     r0,[r9,#0]
000116  9802              LDR      r0,[sp,#8]            ;454
000118  1c40              ADDS     r0,r0,#1              ;454
00011a  9002              STR      r0,[sp,#8]            ;454
                  |L1.284|
00011c  9802              LDR      r0,[sp,#8]            ;454
00011e  f5b06f00          CMP      r0,#0x800             ;454
000122  d3f4              BCC      |L1.270|
                  |L1.292|
;;;457        	}
;;;458        }
;;;459    
;;;460        if(Spare != NULL)
000124  b166              CBZ      r6,|L1.320|
;;;461        {
;;;462            for ( i = 0; i < NANDFLASH_SPARE_SIZE; i++ ) // 添加写spare
000126  2000              MOVS     r0,#0
000128  9002              STR      r0,[sp,#8]
00012a  e006              B        |L1.314|
                  |L1.300|
;;;463        	{
;;;464        		*pDATA = *Spare++;
00012c  f8160b01          LDRB     r0,[r6],#1
000130  f8890000          STRB     r0,[r9,#0]
000134  9802              LDR      r0,[sp,#8]            ;462
000136  1c40              ADDS     r0,r0,#1              ;462
000138  9002              STR      r0,[sp,#8]            ;462
                  |L1.314|
00013a  9802              LDR      r0,[sp,#8]            ;462
00013c  2840              CMP      r0,#0x40              ;462
00013e  d3f5              BCC      |L1.300|
                  |L1.320|
;;;465        	}
;;;466        }
;;;467        
;;;468    	*pCLE = K9FXX_BLOCK_PROGRAM_2;
000140  2010              MOVS     r0,#0x10
000142  f8880000          STRB     r0,[r8,#0]
;;;469    
;;;470    	Delay(1);			//delay 1ms
000146  2001              MOVS     r0,#1
000148  f7fffffe          BL       Delay
;;;471    
;;;472    	return 1;//( NandFlash_ReadStatus( K9FXX_BLOCK_PROGRAM_1 ) );
00014c  2001              MOVS     r0,#1
;;;473    }
00014e  e8bd83fe          POP      {r1-r9,pc}
;;;474    
                          ENDP

                  Nand_ReadPageWithSpare2048 PROC
;;;475    int Nand_ReadPageWithSpare2048(int PageNum,uint8_t *const DataBuf, uint8_t *const Spare)
000152  e92d5ffc          PUSH     {r2-r12,lr}
;;;476    {
000156  4605              MOV      r5,r0
000158  4688              MOV      r8,r1
00015a  4691              MOV      r9,r2
;;;477    	volatile uint8_t *pCLE;
;;;478    	volatile uint8_t *pALE;
;;;479    	volatile uint8_t *pDATA;
;;;480    	volatile uint8_t nand_buf;
;;;481    	uint32_t i, curColumm, curRow;
;;;482        volatile uint8_t j;
;;;483        
;;;484    	i = 0;
00015c  2400              MOVS     r4,#0
;;;485    
;;;486    	pCLE  = K9F1G_CLE;
00015e  4826              LDR      r0,|L1.504|
000160  9001              STR      r0,[sp,#4]
;;;487    	pALE  = K9F1G_ALE;
000162  4e26              LDR      r6,|L1.508|
;;;488    	pDATA = K9F1G_DATA;
000164  f04f4701          MOV      r7,#0x81000000
;;;489    
;;;490    	curColumm = 0;
000168  f04f0a00          MOV      r10,#0
;;;491    	curRow = PageNum;
00016c  46ab              MOV      r11,r5
;;;492    
;;;493    	*pCLE = K9FXX_READ_1;
00016e  2100              MOVS     r1,#0
000170  9801              LDR      r0,[sp,#4]
000172  7001              STRB     r1,[r0,#0]
;;;494    
;;;495    	*pALE = (uint8_t)(curColumm & 0x000000FF);			/* column address low */
000174  f886a000          STRB     r10,[r6,#0]
;;;496    
;;;497    	*pALE = (uint8_t)((curColumm & 0x00000F00) >> 8);		/* column address high */
000178  ea4f201a          LSR      r0,r10,#8
00017c  7030              STRB     r0,[r6,#0]
;;;498    
;;;499    	*pALE = (uint8_t)(curRow & 0x000000FF);		/* row address low */
00017e  f886b000          STRB     r11,[r6,#0]
;;;500    
;;;501    	*pALE = (uint8_t)((curRow & 0x0000FF00) >> 8);
000182  ea4f201b          LSR      r0,r11,#8
000186  7030              STRB     r0,[r6,#0]
;;;502    
;;;503    	*pALE = (uint8_t)((curRow & 0x00010000) >> 16);	/* row address high */
000188  f3cb4000          UBFX     r0,r11,#16,#1
00018c  7030              STRB     r0,[r6,#0]
;;;504    
;;;505    	*pCLE = K9FXX_READ_2;
00018e  2130              MOVS     r1,#0x30
000190  9801              LDR      r0,[sp,#4]
000192  7001              STRB     r1,[r0,#0]
;;;506    
;;;507        
;;;508    	Delay(1);
000194  2001              MOVS     r0,#1
000196  f7fffffe          BL       Delay
;;;509        
;;;510        if(DataBuf != NULL)
00019a  f1b80f00          CMP      r8,#0
00019e  d009              BEQ      |L1.436|
;;;511        {
;;;512            for(i=0;i<NANDFLASH_RW_PAGE_SIZE;i++)
0001a0  bf00              NOP      
0001a2  e003              B        |L1.428|
                  |L1.420|
;;;513            {
;;;514                DataBuf[i]=*pDATA;
0001a4  7838              LDRB     r0,[r7,#0]
0001a6  f8080004          STRB     r0,[r8,r4]
0001aa  1c64              ADDS     r4,r4,#1              ;512
                  |L1.428|
0001ac  f5b46f00          CMP      r4,#0x800             ;512
0001b0  d3f8              BCC      |L1.420|
0001b2  e007              B        |L1.452|
                  |L1.436|
;;;515            }
;;;516        }
;;;517        else
;;;518        {
;;;519            for(i=0;i<NANDFLASH_RW_PAGE_SIZE;i++)
0001b4  2400              MOVS     r4,#0
0001b6  e002              B        |L1.446|
                  |L1.440|
;;;520            {
;;;521                j=*pDATA;
0001b8  7838              LDRB     r0,[r7,#0]
0001ba  9000              STR      r0,[sp,#0]
0001bc  1c64              ADDS     r4,r4,#1              ;519
                  |L1.446|
0001be  f5b46f00          CMP      r4,#0x800             ;519
0001c2  d3f9              BCC      |L1.440|
                  |L1.452|
;;;522            } 
;;;523        }
;;;524        if(Spare!=NULL)
0001c4  f1b90f00          CMP      r9,#0
0001c8  d008              BEQ      |L1.476|
;;;525        {
;;;526            for(i=0;i<NANDFLASH_SPARE_SIZE;i++)
0001ca  2400              MOVS     r4,#0
0001cc  e003              B        |L1.470|
                  |L1.462|
;;;527            {
;;;528            	Spare[i]=*pDATA;
0001ce  7838              LDRB     r0,[r7,#0]
0001d0  f8090004          STRB     r0,[r9,r4]
0001d4  1c64              ADDS     r4,r4,#1              ;526
                  |L1.470|
0001d6  2c40              CMP      r4,#0x40              ;526
0001d8  d3f9              BCC      |L1.462|
0001da  e006              B        |L1.490|
                  |L1.476|
;;;529            }
;;;530        }
;;;531        else
;;;532        {
;;;533            for(i=0;i<NANDFLASH_SPARE_SIZE;i++)
0001dc  2400              MOVS     r4,#0
0001de  e002              B        |L1.486|
                  |L1.480|
;;;534            {
;;;535            	j=*pDATA;
0001e0  7838              LDRB     r0,[r7,#0]
0001e2  9000              STR      r0,[sp,#0]
0001e4  1c64              ADDS     r4,r4,#1              ;533
                  |L1.486|
0001e6  2c40              CMP      r4,#0x40              ;533
0001e8  d3fa              BCC      |L1.480|
                  |L1.490|
;;;536            }
;;;537        }
;;;538        
;;;539    	return 1;
0001ea  2001              MOVS     r0,#1
;;;540    }
0001ec  e8bd9ffc          POP      {r2-r12,pc}
;;;541    
                          ENDP

                  |L1.496|
                          DCD      0x2009c000
                  |L1.500|
                          DCD      InvalidBlockTable
                  |L1.504|
                          DCD      0x80100000
                  |L1.508|
                          DCD      0x80080000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  NandFlash_ReadStatus PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  b510              PUSH     {r4,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000002  4601              MOV      r1,r0
000004  4c0f              LDR      r4,|L2.68|
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  f04f4201          MOV      r2,#0x81000000
00000a  2070              MOVS     r0,#0x70
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  7020              STRB     r0,[r4,#0]
00000e  bf00              NOP      
                  |L2.16|
000010  7810              LDRB     r0,[r2,#0]
000012  f00000c0          AND      r0,r0,#0xc0
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000016  28c0              CMP      r0,#0xc0
000018  d1fa              BNE      |L2.16|
00001a  7813              LDRB     r3,[r2,#0]
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
00001c  b159              CBZ      r1,|L2.54|
00001e  2960              CMP      r1,#0x60
000020  d002              BEQ      |L2.40|
000022  2980              CMP      r1,#0x80
000024  d109              BNE      |L2.58|
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
000026  bf00              NOP      
                  |L2.40|
000028  f0030001          AND      r0,r3,#1
00002c  b108              CBZ      r0,|L2.50|
00002e  2000              MOVS     r0,#0
                  |L2.48|
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
000030  bd10              POP      {r4,pc}
                  |L2.50|
000032  2001              MOVS     r0,#1
000034  e7fc              B        |L2.48|
                  |L2.54|
000036  2001              MOVS     r0,#1
000038  e7fa              B        |L2.48|
                  |L2.58|
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
00003a  bf00              NOP      
00003c  bf00              NOP      
00003e  2000              MOVS     r0,#0
000040  e7f6              B        |L2.48|
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0x80100000

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  NandFlash_ReadId PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  b5f0              PUSH     {r4-r7,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000002  4e09              LDR      r6,|L3.40|
000004  4f09              LDR      r7,|L3.44|
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  f04f4101          MOV      r1,#0x81000000
00000a  2090              MOVS     r0,#0x90
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  7030              STRB     r0,[r6,#0]
00000e  2000              MOVS     r0,#0
000010  7038              STRB     r0,[r7,#0]
000012  780a              LDRB     r2,[r1,#0]
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000014  780b              LDRB     r3,[r1,#0]
000016  780d              LDRB     r5,[r1,#0]
000018  780c              LDRB     r4,[r1,#0]
00001a  0610              LSLS     r0,r2,#24
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
00001c  ea404003          ORR      r0,r0,r3,LSL #16
000020  ea402004          ORR      r0,r0,r4,LSL #8
000024  4328              ORRS     r0,r0,r5
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
000026  bdf0              POP      {r4-r7,pc}
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP

                  |L3.40|
                          DCD      0x80100000
                  |L3.44|
                          DCD      0x80080000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  NandFlash_BlockErase PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000004  4606              MOV      r6,r0
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  4f0a              LDR      r7,|L4.48|
000008  4c0a              LDR      r4,|L4.52|
00000a  01b5              LSLS     r5,r6,#6
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  2060              MOVS     r0,#0x60
00000e  7038              STRB     r0,[r7,#0]
000010  7025              STRB     r5,[r4,#0]
000012  0a28              LSRS     r0,r5,#8
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000014  7020              STRB     r0,[r4,#0]
000016  0c28              LSRS     r0,r5,#16
000018  7020              STRB     r0,[r4,#0]
00001a  20d0              MOVS     r0,#0xd0
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
00001c  7038              STRB     r0,[r7,#0]
00001e  200a              MOVS     r0,#0xa
000020  f7fffffe          BL       Delay
000024  2060              MOVS     r0,#0x60
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
000026  f7fffffe          BL       NandFlash_ReadStatus
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      0x80100000
                  |L4.52|
                          DCD      0x80080000

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  NandFlash_ReadFromAddr PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000004  4606              MOV      r6,r0
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  2500              MOVS     r5,#0
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  f8dfb06c          LDR      r11,|L5.124|
000010  4c1b              LDR      r4,|L5.128|
000012  f04f4001          MOV      r0,#0x81000000
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000016  9000              STR      r0,[sp,#0]
000018  f44f6004          MOV      r0,#0x840
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
00001c  fbb6f1f0          UDIV     r1,r6,r0
000020  fb006811          MLS      r8,r0,r1,r6
000024  fbb6f9f0          UDIV     r9,r6,r0
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
000028  2000              MOVS     r0,#0
00002a  f88b0000          STRB     r0,[r11,#0]
00002e  f8848000          STRB     r8,[r4,#0]
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
000032  f3c82003          UBFX     r0,r8,#8,#4
000036  7020              STRB     r0,[r4,#0]
000038  f8849000          STRB     r9,[r4,#0]
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
00003c  ea4f2019          LSR      r0,r9,#8
000040  7020              STRB     r0,[r4,#0]
000042  f3c94000          UBFX     r0,r9,#16,#1
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
000046  7020              STRB     r0,[r4,#0]
000048  2030              MOVS     r0,#0x30
00004a  f88b0000          STRB     r0,[r11,#0]
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       Delay
000054  bf00              NOP      
000056  e008              B        |L5.106|
                  |L5.88|
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
000058  9800              LDR      r0,[sp,#0]
00005a  7800              LDRB     r0,[r0,#0]
00005c  7038              STRB     r0,[r7,#0]
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
00005e  1c68              ADDS     r0,r5,#1
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
000060  4550              CMP      r0,r10
000062  d300              BCC      |L5.102|
000064  e005              B        |L5.114|
                  |L5.102|
000066  1c7f              ADDS     r7,r7,#1
000068  1c6d              ADDS     r5,r5,#1
                  |L5.106|
00006a  f5c86004          RSB      r0,r8,#0x840
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
00006e  42a8              CMP      r0,r5
000070  d8f2              BHI      |L5.88|
                  |L5.114|
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
000072  bf00              NOP      
000074  4628              MOV      r0,r5
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
000076  e8bd8ff8          POP      {r3-r11,pc}
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      0x80100000
                  |L5.128|
                          DCD      0x80080000

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  NandFlash_PageReadFromAddr PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000004  4605              MOV      r5,r0
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  f8dd9020          LDR      r9,[sp,#0x20]
000010  2400              MOVS     r4,#0
000012  eb051045          ADD      r0,r5,r5,LSL #5
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000016  eb043400          ADD      r4,r4,r0,LSL #12
00001a  eb061046          ADD      r0,r6,r6,LSL #5
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
00001e  eb041480          ADD      r4,r4,r0,LSL #6
000022  443c              ADD      r4,r4,r7
000024  464a              MOV      r2,r9
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
000026  4641              MOV      r1,r8
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       NandFlash_ReadFromAddr
00002e  e8bd87f0          POP      {r4-r10,pc}
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  NandFlash_ValidBlockCheck PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  b57c              PUSH     {r2-r6,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000002  2601              MOVS     r6,#1
000004  2000              MOVS     r0,#0
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  9001              STR      r0,[sp,#4]
000008  2400              MOVS     r4,#0
00000a  e019              B        |L7.64|
                  |L7.12|
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  2500              MOVS     r5,#0
00000e  e014              B        |L7.58|
                  |L7.16|
000010  2001              MOVS     r0,#1
000012  ab01              ADD      r3,sp,#4
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000014  02c2              LSLS     r2,r0,#11
000016  4629              MOV      r1,r5
000018  9000              STR      r0,[sp,#0]
00001a  4620              MOV      r0,r4
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
00001c  f7fffffe          BL       NandFlash_PageReadFromAddr
000020  f89d0004          LDRB     r0,[sp,#4]
000024  28ff              CMP      r0,#0xff
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
000026  d004              BEQ      |L7.50|
000028  2000              MOVS     r0,#0
00002a  4908              LDR      r1,|L7.76|
00002c  5508              STRB     r0,[r1,r4]
00002e  2600              MOVS     r6,#0
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
000030  e002              B        |L7.56|
                  |L7.50|
000032  2001              MOVS     r0,#1
000034  4905              LDR      r1,|L7.76|
000036  5508              STRB     r0,[r1,r4]
                  |L7.56|
000038  1c6d              ADDS     r5,r5,#1
                  |L7.58|
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
00003a  2d02              CMP      r5,#2
00003c  d3e8              BCC      |L7.16|
00003e  1c64              ADDS     r4,r4,#1
                  |L7.64|
000040  f5b46f00          CMP      r4,#0x800
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
000044  d3e2              BCC      |L7.12|
000046  4630              MOV      r0,r6
000048  bd7c              POP      {r2-r6,pc}
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      InvalidBlockTable

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.text||
                  NandFlash_PageReadFromBeginning PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  b5f8              PUSH     {r3-r7,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  4614              MOV      r4,r2
000008  f44f6004          MOV      r0,#0x840
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  4623              MOV      r3,r4
00000e  2200              MOVS     r2,#0
000010  4631              MOV      r1,r6
000012  9000              STR      r0,[sp,#0]
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       NandFlash_PageReadFromAddr
00001a  bdf8              POP      {r3-r7,pc}
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP


                          AREA ||area_number.9||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.9||, ||.text||
                  NandFlash_PageRead PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  b570              PUSH     {r4-r6,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  4616              MOV      r6,r2
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       NandFlash_PageReadFromBeginning
000012  b108              CBZ      r0,|L9.24|
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000014  2001              MOVS     r0,#1
                  |L9.22|
000016  bd70              POP      {r4-r6,pc}
                  |L9.24|
000018  2000              MOVS     r0,#0
00001a  e7fc              B        |L9.22|
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP


                          AREA ||area_number.10||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.10||, ||.text||
                  NandFlash_SectorRead PROC
;;;34      **********************************************************************/
;;;35     void NandFlash_Init( void )
000000  b570              PUSH     {r4-r6,lr}
;;;36     {
;;;37     	uint32_t i;
;;;38     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;39     
;;;40     	/**************************************************************************
;;;41     	* Initialize EMC for NAND FLASH
;;;42     	**************************************************************************/
;;;43     	EMC_Init();
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;44     
;;;45     	LPC_EMC->Control = EMC_Control_E;//|(1<<1);
000006  2500              MOVS     r5,#0
000008  eb052544          ADD      r5,r5,r4,LSL #9
;;;46     
;;;47     	EMC_StaMemConfigMW (0,EMC_StaticConfig_MW_8BITS);
00000c  08a0              LSRS     r0,r4,#2
00000e  eb051580          ADD      r5,r5,r0,LSL #6
000012  f44f7200          MOV      r2,#0x200
;;;48     
;;;49     	EMC_StaMemConfigPB(0,EMC_StaticConfig_PB); //PB = 1 WE# 信号有效
000016  4631              MOV      r1,r6
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       NandFlash_ReadFromAddr
;;;50     											   //PB = 0 WE#信号无效，BLS#取代WE#功能
;;;51     
;;;52     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWEN, EMC_StaticWaitWen_WAITWEN(2));
00001e  bd70              POP      {r4-r6,pc}
;;;53     
;;;54     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITOEN, EMC_StaticWaitOen_WAITOEN(2));
;;;55     
;;;56     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;57     
;;;58     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITPAGE, EMC_StaticwaitPage_WAITPAGE(0x1f));	
;;;59     
;;;60     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITWR, EMC_StaticWaitwr_WAITWR(0x1f));
;;;61     
;;;62     	EMC_SetStaMemoryParameter(0, EMC_STA_MEM_WAITTURN, EMC_StaticWaitTurn_WAITTURN(0x1f));
;;;63     
;;;64         // init timer
;;;65     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
;;;66     	TIM_ConfigStruct.PrescaleValue	= 1;
;;;67     
;;;68     	// Set configuration for Tim_config and Tim_MatchConfig
;;;69     	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
;;;70     
;;;71       	// wait 2ms
;;;72     	TIM_Waitms(2);
;;;73     
;;;74     	/* assume all blocks are valid to begin with */
;;;75     	for ( i = 0; i < NANDFLASH_NUMOF_BLOCK; i++ )
;;;76     	{
;;;77     		InvalidBlockTable[i] = 0;
;;;78     	}
;;;79     
;;;80     	return;
;;;81     }
;;;82     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  InvalidBlockTable
                          %        2048

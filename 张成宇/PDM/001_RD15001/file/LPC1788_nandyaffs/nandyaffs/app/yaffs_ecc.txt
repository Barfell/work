; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\yaffs_ecc.o --asm_dir=.\ --list_dir=.\ --depend=.\flash\yaffs_ecc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\CM3_lib -I..\Drivers -I..\Startup -I.\Easy_web -I.\Lcd_Drv -I.\IIC_Test -I.\USU_Host -I.\Nand_Test -I.\FATFS_R0.08 -I..\fs -I"D:\Program Files\mdk\ARM\RV31\INC" -I"D:\Program Files\mdk\pack\ARM\CMSIS\4.1.1\CMSIS\Include" -I"D:\Program Files\mdk\ARM\Inc\NXP\LPC177x_8x" -D__MICROLIB --omf_browse=.\flash\yaffs_ecc.crf ..\fs\yaffs_ecc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  yaffs_CountBits PROC
;;;74     
;;;75     static int yaffs_CountBits(unsigned char x)
000000  4601              MOV      r1,r0
;;;76     {
;;;77     	int r = 0;
000002  2000              MOVS     r0,#0
;;;78     	while (x) {
000004  e004              B        |L1.16|
                  |L1.6|
;;;79     		if (x & 1)
000006  f0010201          AND      r2,r1,#1
00000a  b102              CBZ      r2,|L1.14|
;;;80     			r++;
00000c  1c40              ADDS     r0,r0,#1
                  |L1.14|
;;;81     		x >>= 1;
00000e  1049              ASRS     r1,r1,#1
                  |L1.16|
000010  2900              CMP      r1,#0                 ;78
000012  d1f8              BNE      |L1.6|
;;;82     	}
;;;83     	return r;
;;;84     }
000014  4770              BX       lr
;;;85     
                          ENDP

                  yaffs_CountBits32 PROC
;;;86     static int yaffs_CountBits32(unsigned x)
000016  4601              MOV      r1,r0
;;;87     {
;;;88     	int r = 0;
000018  2000              MOVS     r0,#0
;;;89     	while (x) {
00001a  e004              B        |L1.38|
                  |L1.28|
;;;90     		if (x & 1)
00001c  f0010201          AND      r2,r1,#1
000020  b102              CBZ      r2,|L1.36|
;;;91     			r++;
000022  1c40              ADDS     r0,r0,#1
                  |L1.36|
;;;92     		x >>= 1;
000024  0849              LSRS     r1,r1,#1
                  |L1.38|
000026  2900              CMP      r1,#0                 ;89
000028  d1f8              BNE      |L1.28|
;;;93     	}
;;;94     	return r;
;;;95     }
00002a  4770              BX       lr
;;;96     
                          ENDP

                  yaffs_ECCCalculate PROC
;;;97     /* Calculate the ECC for a 256-byte block of data */
;;;98     void yaffs_ECCCalculate(const unsigned char *data, unsigned char *ecc)
00002c  e92d41f0          PUSH     {r4-r8,lr}
;;;99     {
000030  4605              MOV      r5,r0
000032  460b              MOV      r3,r1
;;;100    	unsigned int i;
;;;101    
;;;102    	unsigned char col_parity = 0;
000034  2700              MOVS     r7,#0
;;;103    	unsigned char line_parity = 0;
000036  2100              MOVS     r1,#0
;;;104    	unsigned char line_parity_prime = 0;
000038  2200              MOVS     r2,#0
;;;105    	unsigned char t;
;;;106    	unsigned char b;
;;;107    
;;;108    	for (i = 0; i < 256; i++) {
00003a  2400              MOVS     r4,#0
00003c  e016              B        |L1.108|
                  |L1.62|
;;;109    		b = column_parity_table[*data++];
00003e  f8158b01          LDRB     r8,[r5],#1
000042  f8dfc344          LDR      r12,|L1.904|
000046  f81c6008          LDRB     r6,[r12,r8]
;;;110    		col_parity ^= b;
00004a  4077              EORS     r7,r7,r6
;;;111    
;;;112    		if (b & 0x01)	// odd number of bits in the byte
00004c  f0060c01          AND      r12,r6,#1
000050  f1bc0f00          CMP      r12,#0
000054  d009              BEQ      |L1.106|
;;;113    		{
;;;114    			line_parity ^= i;
000056  ea810c04          EOR      r12,r1,r4
00005a  f00c01ff          AND      r1,r12,#0xff
;;;115    			line_parity_prime ^= ~i;
00005e  ea6f0c04          MVN      r12,r4
000062  ea820c0c          EOR      r12,r2,r12
000066  f00c02ff          AND      r2,r12,#0xff
                  |L1.106|
00006a  1c64              ADDS     r4,r4,#1              ;108
                  |L1.108|
00006c  2cff              CMP      r4,#0xff              ;108
00006e  d9e6              BLS      |L1.62|
;;;116    		}
;;;117    
;;;118    	}
;;;119    
;;;120    	ecc[2] = (~col_parity) | 0x03;
000070  ea6f0c07          MVN      r12,r7
000074  f00c0cff          AND      r12,r12,#0xff
000078  f04c0c03          ORR      r12,r12,#3
00007c  f883c002          STRB     r12,[r3,#2]
;;;121    
;;;122    	t = 0;
000080  2000              MOVS     r0,#0
;;;123    	if (line_parity & 0x80)
000082  f0010c80          AND      r12,r1,#0x80
000086  f1bc0f00          CMP      r12,#0
00008a  d001              BEQ      |L1.144|
;;;124    		t |= 0x80;
00008c  f0400080          ORR      r0,r0,#0x80
                  |L1.144|
;;;125    	if (line_parity_prime & 0x80)
000090  f0020c80          AND      r12,r2,#0x80
000094  f1bc0f00          CMP      r12,#0
000098  d001              BEQ      |L1.158|
;;;126    		t |= 0x40;
00009a  f0400040          ORR      r0,r0,#0x40
                  |L1.158|
;;;127    	if (line_parity & 0x40)
00009e  f0010c40          AND      r12,r1,#0x40
0000a2  f1bc0f00          CMP      r12,#0
0000a6  d001              BEQ      |L1.172|
;;;128    		t |= 0x20;
0000a8  f0400020          ORR      r0,r0,#0x20
                  |L1.172|
;;;129    	if (line_parity_prime & 0x40)
0000ac  f0020c40          AND      r12,r2,#0x40
0000b0  f1bc0f00          CMP      r12,#0
0000b4  d001              BEQ      |L1.186|
;;;130    		t |= 0x10;
0000b6  f0400010          ORR      r0,r0,#0x10
                  |L1.186|
;;;131    	if (line_parity & 0x20)
0000ba  f0010c20          AND      r12,r1,#0x20
0000be  f1bc0f00          CMP      r12,#0
0000c2  d001              BEQ      |L1.200|
;;;132    		t |= 0x08;
0000c4  f0400008          ORR      r0,r0,#8
                  |L1.200|
;;;133    	if (line_parity_prime & 0x20)
0000c8  f0020c20          AND      r12,r2,#0x20
0000cc  f1bc0f00          CMP      r12,#0
0000d0  d001              BEQ      |L1.214|
;;;134    		t |= 0x04;
0000d2  f0400004          ORR      r0,r0,#4
                  |L1.214|
;;;135    	if (line_parity & 0x10)
0000d6  f0010c10          AND      r12,r1,#0x10
0000da  f1bc0f00          CMP      r12,#0
0000de  d001              BEQ      |L1.228|
;;;136    		t |= 0x02;
0000e0  f0400002          ORR      r0,r0,#2
                  |L1.228|
;;;137    	if (line_parity_prime & 0x10)
0000e4  f0020c10          AND      r12,r2,#0x10
0000e8  f1bc0f00          CMP      r12,#0
0000ec  d001              BEQ      |L1.242|
;;;138    		t |= 0x01;
0000ee  f0400001          ORR      r0,r0,#1
                  |L1.242|
;;;139    	ecc[1] = ~t;
0000f2  ea6f0c00          MVN      r12,r0
0000f6  f883c001          STRB     r12,[r3,#1]
;;;140    
;;;141    	t = 0;
0000fa  2000              MOVS     r0,#0
;;;142    	if (line_parity & 0x08)
0000fc  f0010c08          AND      r12,r1,#8
000100  f1bc0f00          CMP      r12,#0
000104  d001              BEQ      |L1.266|
;;;143    		t |= 0x80;
000106  f0400080          ORR      r0,r0,#0x80
                  |L1.266|
;;;144    	if (line_parity_prime & 0x08)
00010a  f0020c08          AND      r12,r2,#8
00010e  f1bc0f00          CMP      r12,#0
000112  d001              BEQ      |L1.280|
;;;145    		t |= 0x40;
000114  f0400040          ORR      r0,r0,#0x40
                  |L1.280|
;;;146    	if (line_parity & 0x04)
000118  f0010c04          AND      r12,r1,#4
00011c  f1bc0f00          CMP      r12,#0
000120  d001              BEQ      |L1.294|
;;;147    		t |= 0x20;
000122  f0400020          ORR      r0,r0,#0x20
                  |L1.294|
;;;148    	if (line_parity_prime & 0x04)
000126  f0020c04          AND      r12,r2,#4
00012a  f1bc0f00          CMP      r12,#0
00012e  d001              BEQ      |L1.308|
;;;149    		t |= 0x10;
000130  f0400010          ORR      r0,r0,#0x10
                  |L1.308|
;;;150    	if (line_parity & 0x02)
000134  f0010c02          AND      r12,r1,#2
000138  f1bc0f00          CMP      r12,#0
00013c  d001              BEQ      |L1.322|
;;;151    		t |= 0x08;
00013e  f0400008          ORR      r0,r0,#8
                  |L1.322|
;;;152    	if (line_parity_prime & 0x02)
000142  f0020c02          AND      r12,r2,#2
000146  f1bc0f00          CMP      r12,#0
00014a  d001              BEQ      |L1.336|
;;;153    		t |= 0x04;
00014c  f0400004          ORR      r0,r0,#4
                  |L1.336|
;;;154    	if (line_parity & 0x01)
000150  f0010c01          AND      r12,r1,#1
000154  f1bc0f00          CMP      r12,#0
000158  d001              BEQ      |L1.350|
;;;155    		t |= 0x02;
00015a  f0400002          ORR      r0,r0,#2
                  |L1.350|
;;;156    	if (line_parity_prime & 0x01)
00015e  f0020c01          AND      r12,r2,#1
000162  f1bc0f00          CMP      r12,#0
000166  d001              BEQ      |L1.364|
;;;157    		t |= 0x01;
000168  f0400001          ORR      r0,r0,#1
                  |L1.364|
;;;158    	ecc[0] = ~t;
00016c  ea6f0c00          MVN      r12,r0
000170  f883c000          STRB     r12,[r3,#0]
;;;159    
;;;160    #ifdef CONFIG_YAFFS_ECC_WRONG_ORDER
;;;161    	// Swap the bytes into the wrong order
;;;162    	t = ecc[0];
;;;163    	ecc[0] = ecc[1];
;;;164    	ecc[1] = t;
;;;165    #endif
;;;166    }
000174  e8bd81f0          POP      {r4-r8,pc}
;;;167    
                          ENDP

                  yaffs_ECCCorrect PROC
;;;170    
;;;171    int yaffs_ECCCorrect(unsigned char *data, unsigned char *read_ecc,
000178  e92d47f0          PUSH     {r4-r10,lr}
;;;172    		     const unsigned char *test_ecc)
;;;173    {
00017c  4681              MOV      r9,r0
00017e  460c              MOV      r4,r1
000180  4615              MOV      r5,r2
;;;174    	unsigned char d0, d1, d2;	/* deltas */
;;;175    
;;;176    	d0 = read_ecc[0] ^ test_ecc[0];
000182  7820              LDRB     r0,[r4,#0]
000184  7829              LDRB     r1,[r5,#0]
000186  ea800601          EOR      r6,r0,r1
;;;177    	d1 = read_ecc[1] ^ test_ecc[1];
00018a  7860              LDRB     r0,[r4,#1]
00018c  7869              LDRB     r1,[r5,#1]
00018e  ea800701          EOR      r7,r0,r1
;;;178    	d2 = read_ecc[2] ^ test_ecc[2];
000192  78a0              LDRB     r0,[r4,#2]
000194  78a9              LDRB     r1,[r5,#2]
000196  ea800801          EOR      r8,r0,r1
;;;179    
;;;180    	if ((d0 | d1 | d2) == 0)
00019a  ea460007          ORR      r0,r6,r7
00019e  ea400008          ORR      r0,r0,r8
0001a2  b910              CBNZ     r0,|L1.426|
;;;181    		return 0; /* no error */
0001a4  2000              MOVS     r0,#0
                  |L1.422|
;;;182    
;;;183    	if (((d0 ^ (d0 >> 1)) & 0x55) == 0x55 &&
;;;184    	    ((d1 ^ (d1 >> 1)) & 0x55) == 0x55 &&
;;;185    	    ((d2 ^ (d2 >> 1)) & 0x54) == 0x54) {
;;;186    		/* Single bit (recoverable) error in data */
;;;187    
;;;188    		unsigned byte;
;;;189    		unsigned bit;
;;;190    
;;;191    #ifdef CONFIG_YAFFS_ECC_WRONG_ORDER
;;;192    		// swap the bytes to correct for the wrong order
;;;193    		unsigned char t;
;;;194    
;;;195    		t = d0;
;;;196    		d0 = d1;
;;;197    		d1 = t;
;;;198    #endif
;;;199    
;;;200    		bit = byte = 0;
;;;201    
;;;202    		if (d1 & 0x80)
;;;203    			byte |= 0x80;
;;;204    		if (d1 & 0x20)
;;;205    			byte |= 0x40;
;;;206    		if (d1 & 0x08)
;;;207    			byte |= 0x20;
;;;208    		if (d1 & 0x02)
;;;209    			byte |= 0x10;
;;;210    		if (d0 & 0x80)
;;;211    			byte |= 0x08;
;;;212    		if (d0 & 0x20)
;;;213    			byte |= 0x04;
;;;214    		if (d0 & 0x08)
;;;215    			byte |= 0x02;
;;;216    		if (d0 & 0x02)
;;;217    			byte |= 0x01;
;;;218    
;;;219    		if (d2 & 0x80)
;;;220    			bit |= 0x04;
;;;221    		if (d2 & 0x20)
;;;222    			bit |= 0x02;
;;;223    		if (d2 & 0x08)
;;;224    			bit |= 0x01;
;;;225    
;;;226    		data[byte] ^= (1 << bit);
;;;227    
;;;228    		return 1; /* Corrected the error */
;;;229    	}
;;;230    
;;;231    	if ((yaffs_CountBits(d0) +
;;;232    	     yaffs_CountBits(d1) +
;;;233    	     yaffs_CountBits(d2)) ==  1) {
;;;234    		/* Reccoverable error in ecc */
;;;235    
;;;236    		read_ecc[0] = test_ecc[0];
;;;237    		read_ecc[1] = test_ecc[1];
;;;238    		read_ecc[2] = test_ecc[2];
;;;239    
;;;240    		return 1; /* Corrected the error */
;;;241    	}
;;;242    
;;;243    	/* Unrecoverable error */
;;;244    
;;;245    	return -1;
;;;246    
;;;247    }
0001a6  e8bd87f0          POP      {r4-r10,pc}
                  |L1.426|
0001aa  ea860066          EOR      r0,r6,r6,ASR #1       ;183
0001ae  f0000055          AND      r0,r0,#0x55           ;183
0001b2  2855              CMP      r0,#0x55              ;183
0001b4  d14e              BNE      |L1.596|
0001b6  ea870067          EOR      r0,r7,r7,ASR #1       ;184
0001ba  f0000055          AND      r0,r0,#0x55           ;184
0001be  2855              CMP      r0,#0x55              ;184
0001c0  d148              BNE      |L1.596|
0001c2  ea880068          EOR      r0,r8,r8,ASR #1       ;185
0001c6  f0000054          AND      r0,r0,#0x54           ;185
0001ca  2854              CMP      r0,#0x54              ;185
0001cc  d142              BNE      |L1.596|
0001ce  2000              MOVS     r0,#0                 ;200
0001d0  4601              MOV      r1,r0                 ;200
0001d2  4602              MOV      r2,r0                 ;200
0001d4  f0070080          AND      r0,r7,#0x80           ;202
0001d8  b108              CBZ      r0,|L1.478|
0001da  f0410180          ORR      r1,r1,#0x80           ;203
                  |L1.478|
0001de  f0070020          AND      r0,r7,#0x20           ;204
0001e2  b108              CBZ      r0,|L1.488|
0001e4  f0410140          ORR      r1,r1,#0x40           ;205
                  |L1.488|
0001e8  f0070008          AND      r0,r7,#8              ;206
0001ec  b108              CBZ      r0,|L1.498|
0001ee  f0410120          ORR      r1,r1,#0x20           ;207
                  |L1.498|
0001f2  f0070002          AND      r0,r7,#2              ;208
0001f6  b108              CBZ      r0,|L1.508|
0001f8  f0410110          ORR      r1,r1,#0x10           ;209
                  |L1.508|
0001fc  f0060080          AND      r0,r6,#0x80           ;210
000200  b108              CBZ      r0,|L1.518|
000202  f0410108          ORR      r1,r1,#8              ;211
                  |L1.518|
000206  f0060020          AND      r0,r6,#0x20           ;212
00020a  b108              CBZ      r0,|L1.528|
00020c  f0410104          ORR      r1,r1,#4              ;213
                  |L1.528|
000210  f0060008          AND      r0,r6,#8              ;214
000214  b108              CBZ      r0,|L1.538|
000216  f0410102          ORR      r1,r1,#2              ;215
                  |L1.538|
00021a  f0060002          AND      r0,r6,#2              ;216
00021e  b108              CBZ      r0,|L1.548|
000220  f0410101          ORR      r1,r1,#1              ;217
                  |L1.548|
000224  f0080080          AND      r0,r8,#0x80           ;219
000228  b108              CBZ      r0,|L1.558|
00022a  f0420204          ORR      r2,r2,#4              ;220
                  |L1.558|
00022e  f0080020          AND      r0,r8,#0x20           ;221
000232  b108              CBZ      r0,|L1.568|
000234  f0420202          ORR      r2,r2,#2              ;222
                  |L1.568|
000238  f0080008          AND      r0,r8,#8              ;223
00023c  b108              CBZ      r0,|L1.578|
00023e  f0420201          ORR      r2,r2,#1              ;224
                  |L1.578|
000242  f8190001          LDRB     r0,[r9,r1]            ;226
000246  2301              MOVS     r3,#1                 ;226
000248  4093              LSLS     r3,r3,r2              ;226
00024a  4058              EORS     r0,r0,r3              ;226
00024c  f8090001          STRB     r0,[r9,r1]            ;226
000250  2001              MOVS     r0,#1                 ;228
000252  e7a8              B        |L1.422|
                  |L1.596|
000254  4630              MOV      r0,r6                 ;231
000256  f7fffffe          BL       yaffs_CountBits
00025a  4682              MOV      r10,r0                ;231
00025c  4638              MOV      r0,r7                 ;231
00025e  f7fffffe          BL       yaffs_CountBits
000262  4482              ADD      r10,r10,r0            ;231
000264  4640              MOV      r0,r8                 ;231
000266  f7fffffe          BL       yaffs_CountBits
00026a  4450              ADD      r0,r0,r10             ;231
00026c  2801              CMP      r0,#1                 ;231
00026e  d107              BNE      |L1.640|
000270  7828              LDRB     r0,[r5,#0]            ;236
000272  7020              STRB     r0,[r4,#0]            ;236
000274  7868              LDRB     r0,[r5,#1]            ;237
000276  7060              STRB     r0,[r4,#1]            ;237
000278  78a8              LDRB     r0,[r5,#2]            ;238
00027a  70a0              STRB     r0,[r4,#2]            ;238
00027c  2001              MOVS     r0,#1                 ;240
00027e  e792              B        |L1.422|
                  |L1.640|
000280  f04f30ff          MOV      r0,#0xffffffff        ;245
000284  e78f              B        |L1.422|
;;;248    
                          ENDP

                  yaffs_ECCCalculateOther PROC
;;;252     */
;;;253    void yaffs_ECCCalculateOther(const unsigned char *data, unsigned nBytes,
000286  e92d41f0          PUSH     {r4-r8,lr}
;;;254    			     yaffs_ECCOther * eccOther)
;;;255    {
00028a  4603              MOV      r3,r0
00028c  460c              MOV      r4,r1
;;;256    	unsigned int i;
;;;257    
;;;258    	unsigned char col_parity = 0;
00028e  2700              MOVS     r7,#0
;;;259    	unsigned line_parity = 0;
000290  2500              MOVS     r5,#0
;;;260    	unsigned line_parity_prime = 0;
000292  2600              MOVS     r6,#0
;;;261    	unsigned char b;
;;;262    
;;;263    	for (i = 0; i < nBytes; i++) {
000294  2000              MOVS     r0,#0
000296  e011              B        |L1.700|
                  |L1.664|
;;;264    		b = column_parity_table[*data++];
000298  f8138b01          LDRB     r8,[r3],#1
00029c  f8dfc0e8          LDR      r12,|L1.904|
0002a0  f81c1008          LDRB     r1,[r12,r8]
;;;265    		col_parity ^= b;
0002a4  404f              EORS     r7,r7,r1
;;;266    
;;;267    		if (b & 0x01)	 {
0002a6  f0010c01          AND      r12,r1,#1
0002aa  f1bc0f00          CMP      r12,#0
0002ae  d004              BEQ      |L1.698|
;;;268    			/* odd number of bits in the byte */
;;;269    			line_parity ^= i;
0002b0  4045              EORS     r5,r5,r0
;;;270    			line_parity_prime ^= ~i;
0002b2  ea6f0c00          MVN      r12,r0
0002b6  ea86060c          EOR      r6,r6,r12
                  |L1.698|
0002ba  1c40              ADDS     r0,r0,#1              ;263
                  |L1.700|
0002bc  42a0              CMP      r0,r4                 ;263
0002be  d3eb              BCC      |L1.664|
;;;271    		}
;;;272    
;;;273    	}
;;;274    
;;;275    	eccOther->colParity = (col_parity >> 2) & 0x3f;
0002c0  ea4f0c97          LSR      r12,r7,#2
0002c4  f882c000          STRB     r12,[r2,#0]
;;;276    	eccOther->lineParity = line_parity;
0002c8  6055              STR      r5,[r2,#4]
;;;277    	eccOther->lineParityPrime = line_parity_prime;
0002ca  6096              STR      r6,[r2,#8]
;;;278    }
0002cc  e8bd81f0          POP      {r4-r8,pc}
;;;279    
                          ENDP

                  yaffs_ECCCorrectOther PROC
;;;280    int yaffs_ECCCorrectOther(unsigned char *data, unsigned nBytes,
0002d0  e92d5fff          PUSH     {r0-r12,lr}
;;;281    			  yaffs_ECCOther * read_ecc,
;;;282    			  const yaffs_ECCOther * test_ecc)
;;;283    {
0002d4  4681              MOV      r9,r0
0002d6  4616              MOV      r6,r2
0002d8  461f              MOV      r7,r3
;;;284    	unsigned char cDelta;	/* column parity delta */
;;;285    	unsigned lDelta;	/* line parity delta */
;;;286    	unsigned lDeltaPrime;	/* line parity delta */
;;;287    	unsigned bit;
;;;288    
;;;289    	cDelta = read_ecc->colParity ^ test_ecc->colParity;
0002da  7830              LDRB     r0,[r6,#0]
0002dc  7839              LDRB     r1,[r7,#0]
0002de  ea800401          EOR      r4,r0,r1
;;;290    	lDelta = read_ecc->lineParity ^ test_ecc->lineParity;
0002e2  6870              LDR      r0,[r6,#4]
0002e4  6879              LDR      r1,[r7,#4]
0002e6  ea800501          EOR      r5,r0,r1
;;;291    	lDeltaPrime = read_ecc->lineParityPrime ^ test_ecc->lineParityPrime;
0002ea  68b0              LDR      r0,[r6,#8]
0002ec  68b9              LDR      r1,[r7,#8]
0002ee  ea800a01          EOR      r10,r0,r1
;;;292    
;;;293    	if ((cDelta | lDelta | lDeltaPrime) == 0)
0002f2  ea440005          ORR      r0,r4,r5
0002f6  ea40000a          ORR      r0,r0,r10
0002fa  b918              CBNZ     r0,|L1.772|
;;;294    		return 0; /* no error */
0002fc  2000              MOVS     r0,#0
                  |L1.766|
;;;295    
;;;296    	if (lDelta == ~lDeltaPrime &&
;;;297    	    (((cDelta ^ (cDelta >> 1)) & 0x15) == 0x15))
;;;298    	{
;;;299    		/* Single bit (recoverable) error in data */
;;;300    
;;;301    		bit = 0;
;;;302    
;;;303    		if (cDelta & 0x20)
;;;304    			bit |= 0x04;
;;;305    		if (cDelta & 0x08)
;;;306    			bit |= 0x02;
;;;307    		if (cDelta & 0x02)
;;;308    			bit |= 0x01;
;;;309    
;;;310    		if(lDelta >= nBytes)
;;;311    			return -1;
;;;312    
;;;313    		data[lDelta] ^= (1 << bit);
;;;314    
;;;315    		return 1; /* corrected */
;;;316    	}
;;;317    
;;;318    	if ((yaffs_CountBits32(lDelta) + yaffs_CountBits32(lDeltaPrime) +
;;;319    	     yaffs_CountBits(cDelta)) == 1) {
;;;320    		/* Reccoverable error in ecc */
;;;321    
;;;322    		*read_ecc = *test_ecc;
;;;323    		return 1; /* corrected */
;;;324    	}
;;;325    
;;;326    	/* Unrecoverable error */
;;;327    
;;;328    	return -1;
;;;329    
;;;330    }
0002fe  b004              ADD      sp,sp,#0x10
000300  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.772|
000304  ea6f000a          MVN      r0,r10                ;296
000308  4285              CMP      r5,r0                 ;296
00030a  d126              BNE      |L1.858|
00030c  ea840064          EOR      r0,r4,r4,ASR #1       ;297
000310  f0000015          AND      r0,r0,#0x15           ;297
000314  2815              CMP      r0,#0x15              ;297
000316  d120              BNE      |L1.858|
000318  f04f0800          MOV      r8,#0                 ;301
00031c  f0040020          AND      r0,r4,#0x20           ;303
000320  b108              CBZ      r0,|L1.806|
000322  f0480804          ORR      r8,r8,#4              ;304
                  |L1.806|
000326  f0040008          AND      r0,r4,#8              ;305
00032a  b108              CBZ      r0,|L1.816|
00032c  f0480802          ORR      r8,r8,#2              ;306
                  |L1.816|
000330  f0040002          AND      r0,r4,#2              ;307
000334  b108              CBZ      r0,|L1.826|
000336  f0480801          ORR      r8,r8,#1              ;308
                  |L1.826|
00033a  9801              LDR      r0,[sp,#4]            ;310
00033c  4285              CMP      r5,r0                 ;310
00033e  d302              BCC      |L1.838|
000340  f04f30ff          MOV      r0,#0xffffffff        ;311
000344  e7db              B        |L1.766|
                  |L1.838|
000346  f8190005          LDRB     r0,[r9,r5]            ;313
00034a  2101              MOVS     r1,#1                 ;313
00034c  fa01f108          LSL      r1,r1,r8              ;313
000350  4048              EORS     r0,r0,r1              ;313
000352  f8090005          STRB     r0,[r9,r5]            ;313
000356  2001              MOVS     r0,#1                 ;315
000358  e7d1              B        |L1.766|
                  |L1.858|
00035a  4628              MOV      r0,r5                 ;318
00035c  f7fffffe          BL       yaffs_CountBits32
000360  4683              MOV      r11,r0                ;318
000362  4650              MOV      r0,r10                ;318
000364  f7fffffe          BL       yaffs_CountBits32
000368  4483              ADD      r11,r11,r0            ;318
00036a  4620              MOV      r0,r4                 ;318
00036c  f7fffffe          BL       yaffs_CountBits
000370  4458              ADD      r0,r0,r11             ;318
000372  2801              CMP      r0,#1                 ;318
000374  d105              BNE      |L1.898|
000376  e8970007          LDM      r7,{r0-r2}            ;322
00037a  e8860007          STM      r6,{r0-r2}            ;322
00037e  2001              MOVS     r0,#1                 ;323
000380  e7bd              B        |L1.766|
                  |L1.898|
000382  f04f30ff          MOV      r0,#0xffffffff        ;328
000386  e7ba              B        |L1.766|
;;;331    
                          ENDP

                  |L1.904|
                          DCD      column_parity_table

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  column_parity_table
000000  0055590c          DCB      0x00,0x55,0x59,0x0c
000004  65303c69          DCB      0x65,0x30,0x3c,0x69
000008  693c3065          DCB      0x69,0x3c,0x30,0x65
00000c  0c595500          DCB      0x0c,0x59,0x55,0x00
000010  95c0cc99          DCB      0x95,0xc0,0xcc,0x99
000014  f0a5a9fc          DCB      0xf0,0xa5,0xa9,0xfc
000018  fca9a5f0          DCB      0xfc,0xa9,0xa5,0xf0
00001c  99ccc095          DCB      0x99,0xcc,0xc0,0x95
000020  99ccc095          DCB      0x99,0xcc,0xc0,0x95
000024  fca9a5f0          DCB      0xfc,0xa9,0xa5,0xf0
000028  f0a5a9fc          DCB      0xf0,0xa5,0xa9,0xfc
00002c  95c0cc99          DCB      0x95,0xc0,0xcc,0x99
000030  0c595500          DCB      0x0c,0x59,0x55,0x00
000034  693c3065          DCB      0x69,0x3c,0x30,0x65
000038  65303c69          DCB      0x65,0x30,0x3c,0x69
00003c  0055590c          DCB      0x00,0x55,0x59,0x0c
000040  a5f0fca9          DCB      0xa5,0xf0,0xfc,0xa9
000044  c09599cc          DCB      0xc0,0x95,0x99,0xcc
000048  cc9995c0          DCB      0xcc,0x99,0x95,0xc0
00004c  a9fcf0a5          DCB      0xa9,0xfc,0xf0,0xa5
000050  3065693c          DCB      0x30,0x65,0x69,0x3c
000054  55000c59          DCB      0x55,0x00,0x0c,0x59
000058  590c0055          DCB      0x59,0x0c,0x00,0x55
00005c  3c696530          DCB      0x3c,0x69,0x65,0x30
000060  3c696530          DCB      0x3c,0x69,0x65,0x30
000064  590c0055          DCB      0x59,0x0c,0x00,0x55
000068  55000c59          DCB      0x55,0x00,0x0c,0x59
00006c  3065693c          DCB      0x30,0x65,0x69,0x3c
000070  a9fcf0a5          DCB      0xa9,0xfc,0xf0,0xa5
000074  cc9995c0          DCB      0xcc,0x99,0x95,0xc0
000078  c09599cc          DCB      0xc0,0x95,0x99,0xcc
00007c  a5f0fca9          DCB      0xa5,0xf0,0xfc,0xa9
000080  a9fcf0a5          DCB      0xa9,0xfc,0xf0,0xa5
000084  cc9995c0          DCB      0xcc,0x99,0x95,0xc0
000088  c09599cc          DCB      0xc0,0x95,0x99,0xcc
00008c  a5f0fca9          DCB      0xa5,0xf0,0xfc,0xa9
000090  3c696530          DCB      0x3c,0x69,0x65,0x30
000094  590c0055          DCB      0x59,0x0c,0x00,0x55
000098  55000c59          DCB      0x55,0x00,0x0c,0x59
00009c  3065693c          DCB      0x30,0x65,0x69,0x3c
0000a0  3065693c          DCB      0x30,0x65,0x69,0x3c
0000a4  55000c59          DCB      0x55,0x00,0x0c,0x59
0000a8  590c0055          DCB      0x59,0x0c,0x00,0x55
0000ac  3c696530          DCB      0x3c,0x69,0x65,0x30
0000b0  a5f0fca9          DCB      0xa5,0xf0,0xfc,0xa9
0000b4  c09599cc          DCB      0xc0,0x95,0x99,0xcc
0000b8  cc9995c0          DCB      0xcc,0x99,0x95,0xc0
0000bc  a9fcf0a5          DCB      0xa9,0xfc,0xf0,0xa5
0000c0  0c595500          DCB      0x0c,0x59,0x55,0x00
0000c4  693c3065          DCB      0x69,0x3c,0x30,0x65
0000c8  65303c69          DCB      0x65,0x30,0x3c,0x69
0000cc  0055590c          DCB      0x00,0x55,0x59,0x0c
0000d0  99ccc095          DCB      0x99,0xcc,0xc0,0x95
0000d4  fca9a5f0          DCB      0xfc,0xa9,0xa5,0xf0
0000d8  f0a5a9fc          DCB      0xf0,0xa5,0xa9,0xfc
0000dc  95c0cc99          DCB      0x95,0xc0,0xcc,0x99
0000e0  95c0cc99          DCB      0x95,0xc0,0xcc,0x99
0000e4  f0a5a9fc          DCB      0xf0,0xa5,0xa9,0xfc
0000e8  fca9a5f0          DCB      0xfc,0xa9,0xa5,0xf0
0000ec  99ccc095          DCB      0x99,0xcc,0xc0,0x95
0000f0  0055590c          DCB      0x00,0x55,0x59,0x0c
0000f4  65303c69          DCB      0x65,0x30,0x3c,0x69
0000f8  693c3065          DCB      0x69,0x3c,0x30,0x65
0000fc  0c595500          DCB      0x0c,0x59,0x55,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2449643a          DCB      "$$Id: yaffs_ecc.c,v 1.10 2007/12/13 15:35:17 wookey Exp"
000004  20796166
000008  66735f65
00000c  63632e63
000010  2c762031
000014  2e313020
000018  32303037
00001c  2f31322f
000020  31332031
000024  353a3335
000028  3a313720
00002c  776f6f6b
000030  65792045
000034  7870    
000036  202400            DCB      " $$",0

                          AREA ||.data||, DATA, ALIGN=2

                  yaffs_ecc_c_version
                          DCD      ||.conststring||

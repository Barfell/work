; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\yaffs_nand.o --asm_dir=.\ --list_dir=.\ --depend=.\flash\yaffs_nand.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\CM3_lib -I..\Drivers -I..\Startup -I.\Easy_web -I.\Lcd_Drv -I.\IIC_Test -I.\USU_Host -I.\Nand_Test -I.\FATFS_R0.08 -I..\fs -I"D:\Program Files\mdk\ARM\RV31\INC" -I"D:\Program Files\mdk\pack\ARM\CMSIS\4.1.1\CMSIS\Include" -I"D:\Program Files\mdk\ARM\Inc\NXP\LPC177x_8x" -D__MICROLIB --omf_browse=.\flash\yaffs_nand.crf ..\fs\yaffs_nand.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  yaffs_ReadChunkWithTagsFromNAND PROC
;;;22     
;;;23     int yaffs_ReadChunkWithTagsFromNAND(yaffs_Device * dev, int chunkInNAND,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;24     					   __u8 * buffer,
;;;25     					   yaffs_ExtendedTags * tags)
;;;26     {
000004  b092              SUB      sp,sp,#0x48
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  4691              MOV      r9,r2
00000c  461d              MOV      r5,r3
;;;27     	int result;
;;;28     	yaffs_ExtendedTags localTags;
;;;29     
;;;30     	int realignedChunkInNAND = chunkInNAND - dev->chunkOffset;
00000e  f8d400a8          LDR      r0,[r4,#0xa8]
000012  eba60a00          SUB      r10,r6,r0
;;;31     
;;;32     	/* If there are no tags provided, use local tags to get prioritised gc working */
;;;33     	if(!tags)
000016  b905              CBNZ     r5,|L1.26|
;;;34     		tags = &localTags;
000018  466d              MOV      r5,sp
                  |L1.26|
;;;35     
;;;36     	if (dev->readChunkWithTagsFromNAND)
00001a  6d20              LDR      r0,[r4,#0x50]
00001c  b140              CBZ      r0,|L1.48|
;;;37     		result = dev->readChunkWithTagsFromNAND(dev, realignedChunkInNAND, buffer, tags);
00001e  462b              MOV      r3,r5
000020  464a              MOV      r2,r9
000022  4651              MOV      r1,r10
000024  4620              MOV      r0,r4
000026  f8d4c050          LDR      r12,[r4,#0x50]
00002a  47e0              BLX      r12
00002c  4607              MOV      r7,r0
00002e  e006              B        |L1.62|
                  |L1.48|
;;;38     						     
;;;39     	else
;;;40     		result = yaffs_TagsCompatabilityReadChunkWithTagsFromNAND(dev,
000030  462b              MOV      r3,r5
000032  464a              MOV      r2,r9
000034  4651              MOV      r1,r10
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       yaffs_TagsCompatabilityReadChunkWithTagsFromNAND
00003c  4607              MOV      r7,r0
                  |L1.62|
;;;41     									realignedChunkInNAND,
;;;42     									buffer,
;;;43     									tags);
;;;44     	if(tags &&
00003e  b1dd              CBZ      r5,|L1.120|
;;;45     	   tags->eccResult > YAFFS_ECC_RESULT_NO_ERROR){
000040  7d28              LDRB     r0,[r5,#0x14]
000042  2801              CMP      r0,#1
000044  dd18              BLE      |L1.120|
;;;46     
;;;47     		yaffs_BlockInfo *bi = yaffs_GetBlockInfo(dev, chunkInNAND/dev->nChunksPerBlock);
000046  6921              LDR      r1,[r4,#0x10]
000048  fb96f0f1          SDIV     r0,r6,r1
00004c  f8d4109c          LDR      r1,[r4,#0x9c]
000050  4281              CMP      r1,r0
000052  dc03              BGT      |L1.92|
000054  f8d410a0          LDR      r1,[r4,#0xa0]
000058  4281              CMP      r1,r0
00005a  da01              BGE      |L1.96|
                  |L1.92|
00005c  bf00              NOP      
00005e  bf00              NOP      
                  |L1.96|
000060  f8d4209c          LDR      r2,[r4,#0x9c]
000064  1a82              SUBS     r2,r0,r2
000066  f8d410e4          LDR      r1,[r4,#0xe4]
00006a  eb0108c2          ADD      r8,r1,r2,LSL #3
;;;48                     yaffs_HandleChunkError(dev,bi);
00006e  4641              MOV      r1,r8
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       yaffs_HandleChunkError
;;;49     	}
000076  bf00              NOP      
                  |L1.120|
;;;50     
;;;51     	return result;
000078  4638              MOV      r0,r7
;;;52     }
00007a  b012              ADD      sp,sp,#0x48
00007c  e8bd87f0          POP      {r4-r10,pc}
;;;53     
                          ENDP

                  yaffs_WriteChunkWithTagsToNAND PROC
;;;54     int yaffs_WriteChunkWithTagsToNAND(yaffs_Device * dev, int chunkInNAND,const __u8 * buffer,yaffs_ExtendedTags * tags)
000080  e92d41f0          PUSH     {r4-r8,lr}
;;;55      {
000084  4605              MOV      r5,r0
000086  460e              MOV      r6,r1
000088  4617              MOV      r7,r2
00008a  461c              MOV      r4,r3
;;;56     	chunkInNAND -= dev->chunkOffset;
00008c  f8d500a8          LDR      r0,[r5,#0xa8]
000090  1a36              SUBS     r6,r6,r0
;;;57     
;;;58     
;;;59     	if (tags) {
000092  b14c              CBZ      r4,|L1.168|
;;;60     		tags->sequenceNumber = dev->sequenceNumber;
000094  f8d50e10          LDR      r0,[r5,#0xe10]
000098  6260              STR      r0,[r4,#0x24]
;;;61     		tags->chunkUsed = 1;
00009a  2001              MOVS     r0,#1
00009c  6060              STR      r0,[r4,#4]
;;;62     		if (!yaffs_ValidateTags(tags)) {
00009e  4620              MOV      r0,r4
0000a0  f7fffffe          BL       yaffs_ValidateTags
;;;63     			//T(YAFFS_TRACE_ERROR,(TSTR("Writing uninitialised tags" TENDSTR)));
;;;64     			  
;;;65     			YBUG();
;;;66     		}
;;;67     		T(YAFFS_TRACE_WRITE,
0000a4  bf00              NOP      
0000a6  e001              B        |L1.172|
                  |L1.168|
;;;68     		  (TSTR("Writing chunk %d tags %d %d" TENDSTR), chunkInNAND,
;;;69     		   tags->objectId, tags->chunkId));
;;;70     	} else {
;;;71     		T(YAFFS_TRACE_ERROR, (TSTR("Writing with no tags" TENDSTR)));
0000a8  bf00              NOP      
0000aa  bf00              NOP      
                  |L1.172|
;;;72     		YBUG();
;;;73     	}
;;;74      
;;;75     	 
;;;76     	if (dev->writeChunkWithTagsToNAND)
0000ac  6ce8              LDR      r0,[r5,#0x4c]
0000ae  b138              CBZ      r0,|L1.192|
;;;77      		return yflash2_WriteChunkWithTagsToNAND(dev, chunkInNAND, buffer,tags);
0000b0  4623              MOV      r3,r4
0000b2  463a              MOV      r2,r7
0000b4  4631              MOV      r1,r6
0000b6  4628              MOV      r0,r5
0000b8  f7fffffe          BL       yflash2_WriteChunkWithTagsToNAND
                  |L1.188|
;;;78      		     
;;;79     	else//这个函数进去调用的writeChunkToNAND
;;;80     		return yaffs_TagsCompatabilityWriteChunkWithTagsToNAND(dev,chunkInNAND,buffer,tags);
;;;81     								       
;;;82     	 					       
;;;83     								       
;;;84     }
0000bc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.192|
0000c0  4623              MOV      r3,r4                 ;80
0000c2  463a              MOV      r2,r7                 ;80
0000c4  4631              MOV      r1,r6                 ;80
0000c6  4628              MOV      r0,r5                 ;80
0000c8  f7fffffe          BL       yaffs_TagsCompatabilityWriteChunkWithTagsToNAND
0000cc  e7f6              B        |L1.188|
;;;85     
                          ENDP

                  yaffs_MarkBlockBad PROC
;;;86     int yaffs_MarkBlockBad(yaffs_Device * dev, int blockNo)
0000ce  b570              PUSH     {r4-r6,lr}
;;;87     {
0000d0  4604              MOV      r4,r0
0000d2  460d              MOV      r5,r1
;;;88     	blockNo -= dev->blockOffset;
0000d4  f8d400a4          LDR      r0,[r4,#0xa4]
0000d8  1a2d              SUBS     r5,r5,r0
;;;89     
;;;90     ;
;;;91     	if (dev->markNANDBlockBad)
0000da  6d60              LDR      r0,[r4,#0x54]
0000dc  b120              CBZ      r0,|L1.232|
;;;92     		return dev->markNANDBlockBad(dev, blockNo);
0000de  4629              MOV      r1,r5
0000e0  4620              MOV      r0,r4
0000e2  6d62              LDR      r2,[r4,#0x54]
0000e4  4790              BLX      r2
                  |L1.230|
;;;93     	else
;;;94     		return yaffs_TagsCompatabilityMarkNANDBlockBad(dev, blockNo);
;;;95     }
0000e6  bd70              POP      {r4-r6,pc}
                  |L1.232|
0000e8  4629              MOV      r1,r5                 ;94
0000ea  4620              MOV      r0,r4                 ;94
0000ec  f7fffffe          BL       yaffs_TagsCompatabilityMarkNANDBlockBad
0000f0  e7f9              B        |L1.230|
;;;96     
                          ENDP

                  yaffs_QueryInitialBlockState PROC
;;;97     int yaffs_QueryInitialBlockState(yaffs_Device * dev,
0000f2  e92d41f0          PUSH     {r4-r8,lr}
;;;98     						 int blockNo,
;;;99     						 yaffs_BlockState * state,
;;;100    						 __u32 *sequenceNumber)
;;;101    {
0000f6  4604              MOV      r4,r0
0000f8  460d              MOV      r5,r1
0000fa  4616              MOV      r6,r2
0000fc  461f              MOV      r7,r3
;;;102    	blockNo -= dev->blockOffset;
0000fe  f8d400a4          LDR      r0,[r4,#0xa4]
000102  1a2d              SUBS     r5,r5,r0
;;;103    
;;;104    	if (dev->queryNANDBlock)
000104  6da0              LDR      r0,[r4,#0x58]
000106  b140              CBZ      r0,|L1.282|
;;;105    		return dev->queryNANDBlock(dev, blockNo, state, sequenceNumber);
000108  463b              MOV      r3,r7
00010a  4632              MOV      r2,r6
00010c  4629              MOV      r1,r5
00010e  4620              MOV      r0,r4
000110  f8d4c058          LDR      r12,[r4,#0x58]
000114  47e0              BLX      r12
                  |L1.278|
;;;106    	else
;;;107    		return yaffs_TagsCompatabilityQueryNANDBlock(dev, blockNo,
;;;108    							     state,
;;;109    							     sequenceNumber);
;;;110    }
000116  e8bd81f0          POP      {r4-r8,pc}
                  |L1.282|
00011a  463b              MOV      r3,r7                 ;107
00011c  4632              MOV      r2,r6                 ;107
00011e  4629              MOV      r1,r5                 ;107
000120  4620              MOV      r0,r4                 ;107
000122  f7fffffe          BL       yaffs_TagsCompatabilityQueryNANDBlock
000126  e7f6              B        |L1.278|
;;;111    
                          ENDP

                  yaffs_EraseBlockInNAND PROC
;;;112    
;;;113    int yaffs_EraseBlockInNAND(struct yaffs_DeviceStruct *dev, int blockInNAND)				 
000128  b570              PUSH     {r4-r6,lr}
;;;114    {
00012a  4604              MOV      r4,r0
00012c  460d              MOV      r5,r1
;;;115    	int result;
;;;116    
;;;117    	blockInNAND -= dev->blockOffset;
00012e  f8d400a4          LDR      r0,[r4,#0xa4]
000132  1a2d              SUBS     r5,r5,r0
;;;118    
;;;119    
;;;120    	dev->nBlockErasures++;
000134  f8d40d4c          LDR      r0,[r4,#0xd4c]
000138  1c40              ADDS     r0,r0,#1
00013a  f8c40d4c          STR      r0,[r4,#0xd4c]
;;;121    	result = dev->eraseBlockInNAND(dev, blockInNAND);
00013e  4629              MOV      r1,r5
000140  4620              MOV      r0,r4
000142  6c22              LDR      r2,[r4,#0x40]
000144  4790              BLX      r2
000146  4606              MOV      r6,r0
;;;122    
;;;123    	return result;
000148  4630              MOV      r0,r6
;;;124    }
00014a  bd70              POP      {r4-r6,pc}
;;;125    
                          ENDP

                  yaffs_InitialiseNAND PROC
;;;126    int yaffs_InitialiseNAND(struct yaffs_DeviceStruct *dev)
00014c  b510              PUSH     {r4,lr}
;;;127    {
00014e  4604              MOV      r4,r0
;;;128    	return dev->initialiseNAND(dev);
000150  4620              MOV      r0,r4
000152  6c61              LDR      r1,[r4,#0x44]
000154  4788              BLX      r1
;;;129    }
000156  bd10              POP      {r4,pc}
;;;130    
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2449643a          DCB      "$$Id: yaffs_nand.c,v 1.9 2008/05/05 07:58:58 charles Ex"
000004  20796166
000008  66735f6e
00000c  616e642e
000010  632c7620
000014  312e3920
000018  32303038
00001c  2f30352f
000020  30352030
000024  373a3538
000028  3a353820
00002c  63686172
000030  6c657320
000034  4578    
000036  70202400          DCB      "p $$",0

                          AREA ||.data||, DATA, ALIGN=2

                  yaffs_nand_c_version
                          DCD      ||.conststring||

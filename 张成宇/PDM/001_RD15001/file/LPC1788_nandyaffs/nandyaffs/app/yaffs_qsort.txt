; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\yaffs_qsort.o --asm_dir=.\ --list_dir=.\ --depend=.\flash\yaffs_qsort.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\CM3_lib -I..\Drivers -I..\Startup -I.\Easy_web -I.\Lcd_Drv -I.\IIC_Test -I.\USU_Host -I.\Nand_Test -I.\FATFS_R0.08 -I..\fs -I"D:\Program Files\mdk\ARM\RV31\INC" -I"D:\Program Files\mdk\pack\ARM\CMSIS\4.1.1\CMSIS\Include" -I"D:\Program Files\mdk\ARM\Inc\NXP\LPC177x_8x" -D__MICROLIB --omf_browse=.\flash\yaffs_qsort.crf ..\fs\yaffs_qsort.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  swapfunc PROC
;;;50     static __inline void
;;;51     swapfunc(char *a, char *b, int n, int swaptype)
000000  b5f0              PUSH     {r4-r7,lr}
;;;52     {
000002  461d              MOV      r5,r3
;;;53     	if (swaptype <= 1)
000004  2d01              CMP      r5,#1
000006  dc0d              BGT      |L1.36|
;;;54     		swapcode(long, a, b, n)
000008  0896              LSRS     r6,r2,#2
00000a  4603              MOV      r3,r0
00000c  460c              MOV      r4,r1
00000e  bf00              NOP      
                  |L1.16|
000010  681f              LDR      r7,[r3,#0]
000012  f8d4c000          LDR      r12,[r4,#0]
000016  f843cb04          STR      r12,[r3],#4
00001a  c480              STM      r4!,{r7}
00001c  1e77              SUBS     r7,r6,#1
00001e  1e3e              SUBS     r6,r7,#0
000020  dcf6              BGT      |L1.16|
000022  e00e              B        |L1.66|
                  |L1.36|
;;;55     	else
;;;56     		swapcode(char, a, b, n)
000024  4616              MOV      r6,r2
000026  4603              MOV      r3,r0
000028  460c              MOV      r4,r1
00002a  bf00              NOP      
                  |L1.44|
00002c  781f              LDRB     r7,[r3,#0]
00002e  f894c000          LDRB     r12,[r4,#0]
000032  f803cb01          STRB     r12,[r3],#1
000036  f8047b01          STRB     r7,[r4],#1
00003a  1e77              SUBS     r7,r6,#1
00003c  1e3e              SUBS     r6,r7,#0
00003e  dcf5              BGT      |L1.44|
000040  bf00              NOP      
                  |L1.66|
;;;57     }
000042  bdf0              POP      {r4-r7,pc}
;;;58     
                          ENDP

                  med3 PROC
;;;69     static __inline char *
;;;70     med3(char *a, char *b, char *c, int (*cmp)(const void *, const void *))
000044  e92d41f0          PUSH     {r4-r8,lr}
;;;71     {
000048  4607              MOV      r7,r0
00004a  460d              MOV      r5,r1
00004c  4616              MOV      r6,r2
00004e  461c              MOV      r4,r3
;;;72     	return cmp(a, b) < 0 ?
000050  4629              MOV      r1,r5
000052  4638              MOV      r0,r7
000054  47a0              BLX      r4
000056  2800              CMP      r0,#0
000058  da10              BGE      |L1.124|
;;;73     	       (cmp(b, c) < 0 ? b : (cmp(a, c) < 0 ? c : a ))
00005a  4631              MOV      r1,r6
00005c  4628              MOV      r0,r5
00005e  47a0              BLX      r4
000060  2800              CMP      r0,#0
000062  da02              BGE      |L1.106|
000064  4628              MOV      r0,r5
                  |L1.102|
;;;74                   :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));
;;;75     }
000066  e8bd81f0          POP      {r4-r8,pc}
                  |L1.106|
00006a  4631              MOV      r1,r6                 ;73
00006c  4638              MOV      r0,r7                 ;73
00006e  47a0              BLX      r4                    ;73
000070  2800              CMP      r0,#0                 ;73
000072  da01              BGE      |L1.120|
000074  4630              MOV      r0,r6                 ;73
000076  e7f6              B        |L1.102|
                  |L1.120|
000078  4638              MOV      r0,r7                 ;73
00007a  e7f4              B        |L1.102|
                  |L1.124|
00007c  4631              MOV      r1,r6                 ;74
00007e  4628              MOV      r0,r5                 ;74
000080  47a0              BLX      r4                    ;74
000082  2800              CMP      r0,#0                 ;74
000084  dd01              BLE      |L1.138|
000086  4628              MOV      r0,r5                 ;74
000088  e7ed              B        |L1.102|
                  |L1.138|
00008a  4631              MOV      r1,r6                 ;74
00008c  4638              MOV      r0,r7                 ;74
00008e  47a0              BLX      r4                    ;74
000090  2800              CMP      r0,#0                 ;74
000092  da01              BGE      |L1.152|
000094  4638              MOV      r0,r7                 ;74
000096  e7e6              B        |L1.102|
                  |L1.152|
000098  4630              MOV      r0,r6                 ;74
00009a  e7e4              B        |L1.102|
;;;76     
                          ENDP

                  yaffs_qsort PROC
;;;81     void
;;;82     yaffs_qsort(void *aa, size_t n, size_t es,
00009c  e92d4fff          PUSH     {r0-r11,lr}
;;;83     	int (*cmp)(const void *, const void *))
;;;84     {
0000a0  b087              SUB      sp,sp,#0x1c
0000a2  4689              MOV      r9,r1
0000a4  4614              MOV      r4,r2
;;;85     	char *pa, *pb, *pc, *pd, *pl, *pm, *pn;
;;;86     	int d, r, swaptype, swap_cnt;
;;;87     	register char *a = aa;
0000a6  9e07              LDR      r6,[sp,#0x1c]
;;;88     
;;;89     loop:	SWAPINIT(a, es);
0000a8  bf00              NOP      
                  |L1.170|
0000aa  4630              MOV      r0,r6
0000ac  f0000003          AND      r0,r0,#3
0000b0  b910              CBNZ     r0,|L1.184|
0000b2  f0040003          AND      r0,r4,#3
0000b6  b108              CBZ      r0,|L1.188|
                  |L1.184|
0000b8  2002              MOVS     r0,#2
0000ba  e004              B        |L1.198|
                  |L1.188|
0000bc  2c04              CMP      r4,#4
0000be  d001              BEQ      |L1.196|
0000c0  2001              MOVS     r0,#1
0000c2  e000              B        |L1.198|
                  |L1.196|
0000c4  2000              MOVS     r0,#0
                  |L1.198|
0000c6  9002              STR      r0,[sp,#8]
;;;90     	swap_cnt = 0;
0000c8  2000              MOVS     r0,#0
0000ca  9001              STR      r0,[sp,#4]
;;;91     	if (n < 7) {
0000cc  f1b90f07          CMP      r9,#7
0000d0  d224              BCS      |L1.284|
;;;92     		for (pm = (char *)a + es; pm < (char *) a + n * es; pm += es)
0000d2  eb060a04          ADD      r10,r6,r4
0000d6  e01a              B        |L1.270|
                  |L1.216|
;;;93     			for (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0;
0000d8  4655              MOV      r5,r10
0000da  e00f              B        |L1.252|
                  |L1.220|
;;;94     			     pl -= es)
;;;95     				swap(pl, pl - es);
0000dc  9802              LDR      r0,[sp,#8]
0000de  b930              CBNZ     r0,|L1.238|
0000e0  6828              LDR      r0,[r5,#0]
0000e2  1b29              SUBS     r1,r5,r4
0000e4  6809              LDR      r1,[r1,#0]
0000e6  6029              STR      r1,[r5,#0]
0000e8  1b29              SUBS     r1,r5,r4
0000ea  6008              STR      r0,[r1,#0]
0000ec  e005              B        |L1.250|
                  |L1.238|
0000ee  1b29              SUBS     r1,r5,r4
0000f0  4622              MOV      r2,r4
0000f2  4628              MOV      r0,r5
0000f4  9b02              LDR      r3,[sp,#8]
0000f6  f7fffffe          BL       swapfunc
                  |L1.250|
0000fa  1b2d              SUBS     r5,r5,r4              ;94
                  |L1.252|
0000fc  42b5              CMP      r5,r6                 ;93
0000fe  d905              BLS      |L1.268|
000100  1b28              SUBS     r0,r5,r4              ;93
000102  4629              MOV      r1,r5                 ;93
000104  9a0a              LDR      r2,[sp,#0x28]         ;93
000106  4790              BLX      r2                    ;93
000108  2800              CMP      r0,#0                 ;93
00010a  dce7              BGT      |L1.220|
                  |L1.268|
00010c  44a2              ADD      r10,r10,r4            ;92
                  |L1.270|
00010e  fb096004          MLA      r0,r9,r4,r6           ;92
000112  4550              CMP      r0,r10                ;92
000114  d8e0              BHI      |L1.216|
                  |L1.278|
;;;96     		return;
;;;97     	}
;;;98     	pm = (char *)a + (n / 2) * es;
;;;99     	if (n > 7) {
;;;100    		pl = (char *)a;
;;;101    		pn = (char *)a + (n - 1) * es;
;;;102    		if (n > 40) {
;;;103    			d = (n / 8) * es;
;;;104    			pl = med3(pl, pl + d, pl + 2 * d, cmp);
;;;105    			pm = med3(pm - d, pm, pm + d, cmp);
;;;106    			pn = med3(pn - 2 * d, pn - d, pn, cmp);
;;;107    		}
;;;108    		pm = med3(pl, pm, pn, cmp);
;;;109    	}
;;;110    	swap(a, pm);
;;;111    	pa = pb = (char *)a + es;
;;;112    
;;;113    	pc = pd = (char *)a + (n - 1) * es;
;;;114    	for (;;) {
;;;115    		while (pb <= pc && (r = cmp(pb, a)) <= 0) {
;;;116    			if (r == 0) {
;;;117    				swap_cnt = 1;
;;;118    				swap(pa, pb);
;;;119    				pa += es;
;;;120    			}
;;;121    			pb += es;
;;;122    		}
;;;123    		while (pb <= pc && (r = cmp(pc, a)) >= 0) {
;;;124    			if (r == 0) {
;;;125    				swap_cnt = 1;
;;;126    				swap(pc, pd);
;;;127    				pd -= es;
;;;128    			}
;;;129    			pc -= es;
;;;130    		}
;;;131    		if (pb > pc)
;;;132    			break;
;;;133    		swap(pb, pc);
;;;134    		swap_cnt = 1;
;;;135    		pb += es;
;;;136    		pc -= es;
;;;137    	}
;;;138    	if (swap_cnt == 0) {  /* Switch to insertion sort */
;;;139    		for (pm = (char *) a + es; pm < (char *) a + n * es; pm += es)
;;;140    			for (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0;
;;;141    			     pl -= es)
;;;142    				swap(pl, pl - es);
;;;143    		return;
;;;144    	}
;;;145    
;;;146    	pn = (char *)a + n * es;
;;;147    	r = min(pa - (char *)a, pb - pa);
;;;148    	vecswap(a, pb - r, r);
;;;149    	r = min((long)(pd - pc), (long)(pn - pd - es));
;;;150    	vecswap(pb, pn - r, r);
;;;151    	if ((r = pb - pa) > es)
;;;152    		yaffs_qsort(a, r / es, es, cmp);
;;;153    	if ((r = pd - pc) > es) {
;;;154    		/* Iterate rather than recurse to save stack space */
;;;155    		a = pn - r;
;;;156    		n = r / es;
;;;157    		goto loop;
;;;158    	}
;;;159    /*		yaffs_qsort(pn - r, r / es, es, cmp);*/
;;;160    }
000116  b00b              ADD      sp,sp,#0x2c
000118  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.284|
00011c  ea4f0059          LSR      r0,r9,#1              ;98
000120  fb006a04          MLA      r10,r0,r4,r6          ;98
000124  f1b90f07          CMP      r9,#7                 ;99
000128  d933              BLS      |L1.402|
00012a  4635              MOV      r5,r6                 ;100
00012c  f1a90001          SUB      r0,r9,#1              ;101
000130  fb006004          MLA      r0,r0,r4,r6           ;101
000134  9004              STR      r0,[sp,#0x10]         ;101
000136  f1b90f28          CMP      r9,#0x28              ;102
00013a  d923              BLS      |L1.388|
00013c  ea4f00d9          LSR      r0,r9,#3              ;103
000140  4360              MULS     r0,r4,r0              ;103
000142  9003              STR      r0,[sp,#0xc]          ;103
000144  2302              MOVS     r3,#2                 ;104
000146  9803              LDR      r0,[sp,#0xc]          ;104
000148  fb035200          MLA      r2,r3,r0,r5           ;104
00014c  1829              ADDS     r1,r5,r0              ;104
00014e  4628              MOV      r0,r5                 ;104
000150  9b0a              LDR      r3,[sp,#0x28]         ;104
000152  f7fffffe          BL       med3
000156  4605              MOV      r5,r0                 ;104
000158  9903              LDR      r1,[sp,#0xc]          ;105
00015a  eb0a0201          ADD      r2,r10,r1             ;105
00015e  ebaa0001          SUB      r0,r10,r1             ;105
000162  4651              MOV      r1,r10                ;105
000164  9b0a              LDR      r3,[sp,#0x28]         ;105
000166  f7fffffe          BL       med3
00016a  4682              MOV      r10,r0                ;105
00016c  e9dd2303          LDRD     r2,r3,[sp,#0xc]       ;106
000170  1a99              SUBS     r1,r3,r2              ;106
000172  f04f0c02          MOV      r12,#2                ;106
000176  fb0c3012          MLS      r0,r12,r2,r3          ;106
00017a  9b0a              LDR      r3,[sp,#0x28]         ;106
00017c  9a04              LDR      r2,[sp,#0x10]         ;106
00017e  f7fffffe          BL       med3
000182  9004              STR      r0,[sp,#0x10]         ;106
                  |L1.388|
000184  4651              MOV      r1,r10                ;108
000186  4628              MOV      r0,r5                 ;108
000188  9b0a              LDR      r3,[sp,#0x28]         ;108
00018a  9a04              LDR      r2,[sp,#0x10]         ;108
00018c  f7fffffe          BL       med3
000190  4682              MOV      r10,r0                ;108
                  |L1.402|
000192  9802              LDR      r0,[sp,#8]            ;110
000194  b930              CBNZ     r0,|L1.420|
000196  6830              LDR      r0,[r6,#0]            ;110
000198  f8da1000          LDR      r1,[r10,#0]           ;110
00019c  6031              STR      r1,[r6,#0]            ;110
00019e  f8ca0000          STR      r0,[r10,#0]           ;110
0001a2  e005              B        |L1.432|
                  |L1.420|
0001a4  4622              MOV      r2,r4                 ;110
0001a6  4651              MOV      r1,r10                ;110
0001a8  4630              MOV      r0,r6                 ;110
0001aa  9b02              LDR      r3,[sp,#8]            ;110
0001ac  f7fffffe          BL       swapfunc
                  |L1.432|
0001b0  1930              ADDS     r0,r6,r4              ;111
0001b2  4607              MOV      r7,r0                 ;111
0001b4  9006              STR      r0,[sp,#0x18]         ;111
0001b6  f1a90001          SUB      r0,r9,#1              ;113
0001ba  fb006004          MLA      r0,r0,r4,r6           ;113
0001be  4680              MOV      r8,r0                 ;113
0001c0  9005              STR      r0,[sp,#0x14]         ;113
0001c2  bf00              NOP                            ;114
                  |L1.452|
0001c4  e017              B        |L1.502|
                  |L1.454|
0001c6  f1bb0f00          CMP      r11,#0                ;116
0001ca  d113              BNE      |L1.500|
0001cc  2001              MOVS     r0,#1                 ;117
0001ce  9001              STR      r0,[sp,#4]            ;117
0001d0  9802              LDR      r0,[sp,#8]            ;118
0001d2  b930              CBNZ     r0,|L1.482|
0001d4  9906              LDR      r1,[sp,#0x18]         ;118
0001d6  6808              LDR      r0,[r1,#0]            ;118
0001d8  683a              LDR      r2,[r7,#0]            ;118
0001da  9906              LDR      r1,[sp,#0x18]         ;118
0001dc  600a              STR      r2,[r1,#0]            ;118
0001de  6038              STR      r0,[r7,#0]            ;118
0001e0  e005              B        |L1.494|
                  |L1.482|
0001e2  4622              MOV      r2,r4                 ;118
0001e4  4639              MOV      r1,r7                 ;118
0001e6  9b02              LDR      r3,[sp,#8]            ;118
0001e8  9806              LDR      r0,[sp,#0x18]         ;118
0001ea  f7fffffe          BL       swapfunc
                  |L1.494|
0001ee  9806              LDR      r0,[sp,#0x18]         ;119
0001f0  4420              ADD      r0,r0,r4              ;119
0001f2  9006              STR      r0,[sp,#0x18]         ;119
                  |L1.500|
0001f4  4427              ADD      r7,r7,r4              ;121
                  |L1.502|
0001f6  4547              CMP      r7,r8                 ;115
0001f8  d806              BHI      |L1.520|
0001fa  4631              MOV      r1,r6                 ;115
0001fc  4638              MOV      r0,r7                 ;115
0001fe  9a0a              LDR      r2,[sp,#0x28]         ;115
000200  4790              BLX      r2                    ;115
000202  f1b00b00          SUBS     r11,r0,#0             ;115
000206  ddde              BLE      |L1.454|
                  |L1.520|
000208  e01a              B        |L1.576|
                  |L1.522|
00020a  f1bb0f00          CMP      r11,#0                ;124
00020e  d115              BNE      |L1.572|
000210  2001              MOVS     r0,#1                 ;125
000212  9001              STR      r0,[sp,#4]            ;125
000214  9802              LDR      r0,[sp,#8]            ;126
000216  b940              CBNZ     r0,|L1.554|
000218  f8d80000          LDR      r0,[r8,#0]            ;126
00021c  9905              LDR      r1,[sp,#0x14]         ;126
00021e  6809              LDR      r1,[r1,#0]            ;126
000220  f8c81000          STR      r1,[r8,#0]            ;126
000224  9905              LDR      r1,[sp,#0x14]         ;126
000226  6008              STR      r0,[r1,#0]            ;126
000228  e005              B        |L1.566|
                  |L1.554|
00022a  4622              MOV      r2,r4                 ;126
00022c  4640              MOV      r0,r8                 ;126
00022e  9b02              LDR      r3,[sp,#8]            ;126
000230  9905              LDR      r1,[sp,#0x14]         ;126
000232  f7fffffe          BL       swapfunc
                  |L1.566|
000236  9805              LDR      r0,[sp,#0x14]         ;127
000238  1b00              SUBS     r0,r0,r4              ;127
00023a  9005              STR      r0,[sp,#0x14]         ;127
                  |L1.572|
00023c  eba80804          SUB      r8,r8,r4              ;129
                  |L1.576|
000240  4547              CMP      r7,r8                 ;123
000242  d806              BHI      |L1.594|
000244  4631              MOV      r1,r6                 ;123
000246  4640              MOV      r0,r8                 ;123
000248  9a0a              LDR      r2,[sp,#0x28]         ;123
00024a  4790              BLX      r2                    ;123
00024c  f1b00b00          SUBS     r11,r0,#0             ;123
000250  dadb              BGE      |L1.522|
                  |L1.594|
000252  4547              CMP      r7,r8                 ;131
000254  d900              BLS      |L1.600|
000256  e014              B        |L1.642|
                  |L1.600|
000258  9802              LDR      r0,[sp,#8]            ;133
00025a  b930              CBNZ     r0,|L1.618|
00025c  6838              LDR      r0,[r7,#0]            ;133
00025e  f8d81000          LDR      r1,[r8,#0]            ;133
000262  6039              STR      r1,[r7,#0]            ;133
000264  f8c80000          STR      r0,[r8,#0]            ;133
000268  e005              B        |L1.630|
                  |L1.618|
00026a  4622              MOV      r2,r4                 ;133
00026c  4641              MOV      r1,r8                 ;133
00026e  4638              MOV      r0,r7                 ;133
000270  9b02              LDR      r3,[sp,#8]            ;133
000272  f7fffffe          BL       swapfunc
                  |L1.630|
000276  2001              MOVS     r0,#1                 ;134
000278  9001              STR      r0,[sp,#4]            ;134
00027a  4427              ADD      r7,r7,r4              ;135
00027c  eba80804          SUB      r8,r8,r4              ;136
000280  e7a0              B        |L1.452|
                  |L1.642|
000282  bf00              NOP                            ;132
000284  9801              LDR      r0,[sp,#4]            ;138
000286  bb10              CBNZ     r0,|L1.718|
000288  eb060a04          ADD      r10,r6,r4             ;139
00028c  e01a              B        |L1.708|
                  |L1.654|
00028e  4655              MOV      r5,r10                ;140
000290  e00f              B        |L1.690|
                  |L1.658|
000292  9802              LDR      r0,[sp,#8]            ;142
000294  b930              CBNZ     r0,|L1.676|
000296  6828              LDR      r0,[r5,#0]            ;142
000298  1b29              SUBS     r1,r5,r4              ;142
00029a  6809              LDR      r1,[r1,#0]            ;142
00029c  6029              STR      r1,[r5,#0]            ;142
00029e  1b29              SUBS     r1,r5,r4              ;142
0002a0  6008              STR      r0,[r1,#0]            ;142
0002a2  e005              B        |L1.688|
                  |L1.676|
0002a4  1b29              SUBS     r1,r5,r4              ;142
0002a6  4622              MOV      r2,r4                 ;142
0002a8  4628              MOV      r0,r5                 ;142
0002aa  9b02              LDR      r3,[sp,#8]            ;142
0002ac  f7fffffe          BL       swapfunc
                  |L1.688|
0002b0  1b2d              SUBS     r5,r5,r4              ;141
                  |L1.690|
0002b2  42b5              CMP      r5,r6                 ;140
0002b4  d905              BLS      |L1.706|
0002b6  1b28              SUBS     r0,r5,r4              ;140
0002b8  4629              MOV      r1,r5                 ;140
0002ba  9a0a              LDR      r2,[sp,#0x28]         ;140
0002bc  4790              BLX      r2                    ;140
0002be  2800              CMP      r0,#0                 ;140
0002c0  dce7              BGT      |L1.658|
                  |L1.706|
0002c2  44a2              ADD      r10,r10,r4            ;139
                  |L1.708|
0002c4  fb096004          MLA      r0,r9,r4,r6           ;139
0002c8  4550              CMP      r0,r10                ;139
0002ca  d8e0              BHI      |L1.654|
0002cc  e723              B        |L1.278|
                  |L1.718|
0002ce  fb096004          MLA      r0,r9,r4,r6           ;146
0002d2  9004              STR      r0,[sp,#0x10]         ;146
0002d4  9806              LDR      r0,[sp,#0x18]         ;147
0002d6  1b81              SUBS     r1,r0,r6              ;147
0002d8  1a38              SUBS     r0,r7,r0              ;147
0002da  4281              CMP      r1,r0                 ;147
0002dc  da02              BGE      |L1.740|
0002de  9806              LDR      r0,[sp,#0x18]         ;147
0002e0  1b80              SUBS     r0,r0,r6              ;147
0002e2  e001              B        |L1.744|
                  |L1.740|
0002e4  9806              LDR      r0,[sp,#0x18]         ;147
0002e6  1a38              SUBS     r0,r7,r0              ;147
                  |L1.744|
0002e8  4683              MOV      r11,r0                ;147
0002ea  f1bb0f00          CMP      r11,#0                ;148
0002ee  dd06              BLE      |L1.766|
0002f0  eba7010b          SUB      r1,r7,r11             ;148
0002f4  465a              MOV      r2,r11                ;148
0002f6  4630              MOV      r0,r6                 ;148
0002f8  9b02              LDR      r3,[sp,#8]            ;148
0002fa  f7fffffe          BL       swapfunc
                  |L1.766|
0002fe  9805              LDR      r0,[sp,#0x14]         ;149
000300  eba00208          SUB      r2,r0,r8              ;149
000304  e9dd0104          LDRD     r0,r1,[sp,#0x10]      ;149
000308  1a40              SUBS     r0,r0,r1              ;149
00030a  1b00              SUBS     r0,r0,r4              ;149
00030c  4282              CMP      r2,r0                 ;149
00030e  da03              BGE      |L1.792|
000310  9805              LDR      r0,[sp,#0x14]         ;149
000312  eba00008          SUB      r0,r0,r8              ;149
000316  e003              B        |L1.800|
                  |L1.792|
000318  e9dd0104          LDRD     r0,r1,[sp,#0x10]      ;149
00031c  1a40              SUBS     r0,r0,r1              ;149
00031e  1b00              SUBS     r0,r0,r4              ;149
                  |L1.800|
000320  4683              MOV      r11,r0                ;149
000322  f1bb0f00          CMP      r11,#0                ;150
000326  dd07              BLE      |L1.824|
000328  9804              LDR      r0,[sp,#0x10]         ;150
00032a  eba0010b          SUB      r1,r0,r11             ;150
00032e  465a              MOV      r2,r11                ;150
000330  4638              MOV      r0,r7                 ;150
000332  9b02              LDR      r3,[sp,#8]            ;150
000334  f7fffffe          BL       swapfunc
                  |L1.824|
000338  9806              LDR      r0,[sp,#0x18]         ;151
00033a  1a38              SUBS     r0,r7,r0              ;151
00033c  4683              MOV      r11,r0                ;151
00033e  42a0              CMP      r0,r4                 ;151
000340  d908              BLS      |L1.852|
000342  fbbbf0f4          UDIV     r0,r11,r4             ;152
000346  9000              STR      r0,[sp,#0]            ;152
000348  4622              MOV      r2,r4                 ;152
00034a  4601              MOV      r1,r0                 ;152
00034c  4630              MOV      r0,r6                 ;152
00034e  9b0a              LDR      r3,[sp,#0x28]         ;152
000350  f7fffffe          BL       yaffs_qsort
                  |L1.852|
000354  9805              LDR      r0,[sp,#0x14]         ;153
000356  eba00008          SUB      r0,r0,r8              ;153
00035a  4683              MOV      r11,r0                ;153
00035c  42a0              CMP      r0,r4                 ;153
00035e  d905              BLS      |L1.876|
000360  9804              LDR      r0,[sp,#0x10]         ;155
000362  eba0060b          SUB      r6,r0,r11             ;155
000366  fbbbf9f4          UDIV     r9,r11,r4             ;156
00036a  e69e              B        |L1.170|
                  |L1.876|
00036c  bf00              NOP      
00036e  e6d2              B        |L1.278|
                          ENDP

